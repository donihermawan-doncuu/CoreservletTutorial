<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>Crafting Kubernetes Operators</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/lTQ7sUh8Voc/" /><category term="DevNation" /><category term="DevOps" /><category term="Kubernetes" /><category term="Operator" /><category term="application life cycle" /><category term="application lifecycle" /><category term="kubernetes api" /><category term="operator framework" /><author><name>Joshua Wood</name></author><id>https://developers.redhat.com/blog/?p=708738</id><updated>2020-04-15T07:00:02Z</updated><published>2020-04-15T07:00:02Z</published><content type="html">&lt;p&gt;DevNation Live tech talks are hosted by the Red Hat technologists who create our products. These sessions include real solutions plus code and sample projects to help you get started. In this talk, you’ll learn about crafting Kubernetes Operators from &lt;a href="https://developers.redhat.com/blog/author/joswood/"&gt;Josh Wood&lt;/a&gt; and &lt;a href="https://developers.redhat.com/blog/author/burrsutter/"&gt;Burr Sutter&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Kubernetes Operators are control plane agents that know how to manage the entire life cycle of stateful, complex, or specialized applications. With an Operator, you can extend the Kubernetes API to encode domain-specific knowledge about running, scaling, recovering, and monitoring your applications. This workshop guides you through creating and deploying an Operator using the Operator Framework and SDK, open source tools from Red Hat that simplify the process of making an Operator that packages, delivers, and manages your applications on Kubernetes.&lt;/p&gt; &lt;p&gt;Watch the entire talk:&lt;/p&gt; &lt;p&gt;&lt;iframe src="https://www.youtube.com/embed/P9OhZhId03E" width="560" height="315" frameborder="0" allowfullscreen="allowfullscreen"&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;h2&gt;Learn more&lt;/h2&gt; &lt;p&gt;Join us at an &lt;a href="https://developers.redhat.com/events/"&gt;upcoming developer event&lt;/a&gt;, and see our collection of &lt;a href="https://developers.redhat.com/devnation/?page=0"&gt;past DevNation Tech Talks&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F15%2Fcrafting-kubernetes-operators%2F&amp;#38;linkname=Crafting%20Kubernetes%20Operators" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F15%2Fcrafting-kubernetes-operators%2F&amp;#38;linkname=Crafting%20Kubernetes%20Operators" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F15%2Fcrafting-kubernetes-operators%2F&amp;#38;linkname=Crafting%20Kubernetes%20Operators" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F15%2Fcrafting-kubernetes-operators%2F&amp;#38;linkname=Crafting%20Kubernetes%20Operators" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F15%2Fcrafting-kubernetes-operators%2F&amp;#38;linkname=Crafting%20Kubernetes%20Operators" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F15%2Fcrafting-kubernetes-operators%2F&amp;#38;linkname=Crafting%20Kubernetes%20Operators" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F15%2Fcrafting-kubernetes-operators%2F&amp;#38;linkname=Crafting%20Kubernetes%20Operators" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F15%2Fcrafting-kubernetes-operators%2F&amp;#038;title=Crafting%20Kubernetes%20Operators" data-a2a-url="https://developers.redhat.com/blog/2020/04/15/crafting-kubernetes-operators/" data-a2a-title="Crafting Kubernetes Operators"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/04/15/crafting-kubernetes-operators/"&gt;Crafting Kubernetes Operators&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/lTQ7sUh8Voc" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;DevNation Live tech talks are hosted by the Red Hat technologists who create our products. These sessions include real solutions plus code and sample projects to help you get started. In this talk, you’ll learn about crafting Kubernetes Operators from Josh Wood and Burr Sutter. Kubernetes Operators are control plane agents that know how to [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/04/15/crafting-kubernetes-operators/"&gt;Crafting Kubernetes Operators&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><post-id xmlns="com-wordpress:feed-additions:1">708738</post-id><dc:creator>Joshua Wood</dc:creator><dc:date>2020-04-15T07:00:02Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/04/15/crafting-kubernetes-operators/</feedburner:origLink></entry><entry><title>How to quickly run 100 Camels with Apache Camel, Quarkus and GraalVM</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/Av6No9c6lQ0/how-to-quickly-run-100-camels-with.html" /><category term="apache camel" scheme="searchisko:content:tags" /><category term="feed_group_name_fusesource" scheme="searchisko:content:tags" /><category term="feed_name_clausibsen" scheme="searchisko:content:tags" /><category term="GraalVM" scheme="searchisko:content:tags" /><category term="quarkus" scheme="searchisko:content:tags" /><category term="video" scheme="searchisko:content:tags" /><author><name>Claus Ibsen</name></author><id>searchisko:content:id:jbossorg_blog-how_to_quickly_run_100_camels_with_apache_camel_quarkus_and_graalvm</id><updated>2020-04-14T12:41:53Z</updated><published>2020-04-14T12:41:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;Today I continue me practice on youtube and recorded a &lt;a href="https://www.youtube.com/watch?v=4lXSf8DBQkQ"&gt;10 minute video&lt;/a&gt; on creating a new Camel and Quarkus project that includes Rest and HTTP services with health checks and metrics out of the box.&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;iframe width="320" height="266" class="YOUTUBE-iframe-video" data-thumbnail-src="https://i.ytimg.com/vi/4lXSf8DBQkQ/0.jpg" src="https://www.youtube.com/embed/4lXSf8DBQkQ?feature=player_embedded" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;br /&gt;Then comparing the memory usage of running the example in JVM mode vs native compiled with GraalVM. Then showing for the finale how to quickly run 100 instances of the example each on their own TCP port and how quick Camel are to startup and service the first requests faster than you can type and click.&lt;br /&gt;&lt;br /&gt;For this demo I am using Java 11, Apache Camel 3.2.0, Quarkus 1.3.2 and GaalVM CE 20.0.0. You can find the source code for the example at &lt;a href="https://github.com/apache/camel-quarkus/tree/master/examples/http-log"&gt;camel-quarkus github&lt;/a&gt; with instructions how to try for yourself.&lt;br /&gt;&lt;br /&gt;We are working on reducing the binary image size for Camel 3.3, by eliminating more classes that GraalVM includes that are not necessary. And we also have an experiment with an alternative lightweight CamelContext that are non dynamic at runtime which can improve this further. And then GraalVM and Quarkus will of course also keep innovative and make it smaller and faster.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=Fz7Ji7zuHWo:VG308pRg5cM:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=Fz7Ji7zuHWo:VG308pRg5cM:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?i=Fz7Ji7zuHWo:VG308pRg5cM:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=Fz7Ji7zuHWo:VG308pRg5cM:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?i=Fz7Ji7zuHWo:VG308pRg5cM:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=Fz7Ji7zuHWo:VG308pRg5cM:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?i=Fz7Ji7zuHWo:VG308pRg5cM:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/ApacheCamel/~4/Fz7Ji7zuHWo" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/Av6No9c6lQ0" height="1" width="1" alt=""/&gt;</content><summary>Today I continue me practice on youtube and recorded a 10 minute video on creating a new Camel and Quarkus project that includes Rest and HTTP services with health checks and metrics out of the box. Then comparing the memory usage of running the example in JVM mode vs native compiled with GraalVM. Then showing for the finale how to quickly run 100 instances of the example each on their own TCP por...</summary><dc:creator>Claus Ibsen</dc:creator><dc:date>2020-04-14T12:41:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/ApacheCamel/~3/Fz7Ji7zuHWo/how-to-quickly-run-100-camels-with.html</feedburner:origLink></entry><entry><title>Functional Programming in DMN: it FEELs like recursing my university studies again</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/FsOVQO8PrMA/DMN-FEEL-recursion-currying-YCombinator.html" /><category term="#dmn" scheme="searchisko:content:tags" /><category term="#Drools" scheme="searchisko:content:tags" /><category term="#FEEL" scheme="searchisko:content:tags" /><category term="#FP" scheme="searchisko:content:tags" /><category term="#recursion" scheme="searchisko:content:tags" /><category term="#YCombinator" scheme="searchisko:content:tags" /><category term="feed_group_name_drools" scheme="searchisko:content:tags" /><category term="feed_name_drools" scheme="searchisko:content:tags" /><author><name>Matteo Mortari</name></author><id>searchisko:content:id:jbossorg_blog-functional_programming_in_dmn_it_feels_like_recursing_my_university_studies_again</id><updated>2020-04-14T09:25:08Z</updated><published>2020-04-14T09:25:00Z</published><content type="html">In this post, I would like to share interesting insights about recursion support in DMN and highlights how specific properties of the FEEL language enable functional programming constructs to be modeled in DMN.&lt;br /&gt;&lt;br /&gt;We are going to start from a basic example, in order to demonstrate how the Business Friendliness nature of the FEEL language and DMN constructs, allow us to tame an otherwise commonly unpleasant problem: the definition of a recursive function. Then, we are going to adventure in FP land, and in the cradle of FEEL/DMN we will admire one of the best creatures of functional construct: the Y Combinator. At the end, we will find ourselves be asked the famous question again:&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-Ovsb3rRsdLY/XpV4DzewakI/AAAAAAAAcsA/meKW5eMVQuw4lS3-PsfpI-LKNBzBzRxiQCNcBGAsYHQ/s1600/image4.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="609" data-original-width="1125" height="173" src="https://1.bp.blogspot.com/-Ovsb3rRsdLY/XpV4DzewakI/AAAAAAAAcsA/meKW5eMVQuw4lS3-PsfpI-LKNBzBzRxiQCNcBGAsYHQ/s320/image4.png" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;Using the pure engineering approach, let’s dig into the matter right away!&lt;br /&gt;&lt;br /&gt;&lt;div&gt;&lt;h2&gt;Basic recursion example&lt;/h2&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;The &lt;a href="https://drools.org/learn/dmn.html" target="_blank"&gt;Drools DMN open source engine&lt;/a&gt; allows recursion support in DMN Business Knowledge Model nodes. This enables modeling of recursive functions very easily and &lt;b&gt;it is our recommended approach&lt;/b&gt; when modeling recursive functions in DMN: allow the function to call itself by its name.&lt;br /&gt;&lt;br /&gt;Let’s take a look at a simple example: modeling the &lt;a href="https://en.wikipedia.org/wiki/Factorial" target="_blank"&gt;factorial&lt;/a&gt; function in DMN.&lt;br /&gt;&lt;br /&gt;We can use the &lt;a href="https://porcelli.me/announcement/tooling/online/bpmn/dmn/2020/03/12/online-new-editors.html" target="_blank"&gt;Kogito DMN editor&lt;/a&gt; and define the DRD as follows:&lt;a href="https://1.bp.blogspot.com/-DtC2-_Svfkw/XpV5G5BF9KI/AAAAAAAAcsI/81lgASeZ3a4OYnYMyVHF0ewCxVH-HeGfwCNcBGAsYHQ/s1600/image3.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em; text-align: center;"&gt;&lt;img border="0" data-original-height="868" data-original-width="1201" height="462" src="https://1.bp.blogspot.com/-DtC2-_Svfkw/XpV5G5BF9KI/AAAAAAAAcsI/81lgASeZ3a4OYnYMyVHF0ewCxVH-HeGfwCNcBGAsYHQ/s640/image3.png" width="640" /&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;With the “fac” Business Knowledge Model (in short, BKM) node defining the actual Factorial function recursively as:&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-7Ot9dJRr7mw/XpV5lx6wYLI/AAAAAAAAcsQ/tLPW-S0ZtiIRp5Jvqd3YQykPIHiTIuZEwCNcBGAsYHQ/s1600/image9.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="326" data-original-width="532" height="392" src="https://1.bp.blogspot.com/-7Ot9dJRr7mw/XpV5lx6wYLI/AAAAAAAAcsQ/tLPW-S0ZtiIRp5Jvqd3YQykPIHiTIuZEwCNcBGAsYHQ/s640/image9.png" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;As we can notice, the function invokes itself as any other normal &lt;a href="https://www.google.com/search?q=recursion" target="_blank"&gt;recursive&lt;/a&gt; function, the only difference here is that it is defined as part of a DMN Boxed Expression; the name of this function is defined by the BKM node with the boxed expression construct “fac”, then the body of the function make reference and invokes itself as part of the FEEL expression “fac(n-1)”.&lt;br /&gt;&lt;br /&gt;We can use this BKM to calculate the actual result as passed by the Input Data node, as part of the “compute factorial” Decision, as:&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-RcPiU8L7Qug/XpV5sA1ZRVI/AAAAAAAAcsU/E08ZZwqCmyMeMaPVB3siTggs-1bYrYbbACNcBGAsYHQ/s1600/image2.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="330" data-original-width="564" height="374" src="https://1.bp.blogspot.com/-RcPiU8L7Qug/XpV5sA1ZRVI/AAAAAAAAcsU/E08ZZwqCmyMeMaPVB3siTggs-1bYrYbbACNcBGAsYHQ/s640/image2.png" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;This works well and gives the expected results:&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;{&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; My number: 3&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; fac: function fac( n )&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; compute factorial: 6&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;h2&gt;&lt;span style="font-family: inherit;"&gt;About currying&lt;/span&gt;&lt;/h2&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="font-family: inherit;"&gt;DMN and more importantly the FEEL language allow to define and invoke &lt;a href="https://en.wikipedia.org/wiki/Currying#Contrast_with_partial_function_application" target="_blank"&gt;curried&lt;/a&gt; functions.&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="font-family: inherit;"&gt;This allows us to write in FEEL something like:&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;{ f : function(a) function(b) a + b, r : f(1)(2) }&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="font-family: inherit;"&gt;where:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;span style="font-family: inherit;"&gt;we defined a feel:context with 2 entries&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="font-family: inherit;"&gt;the first entry is named “f” and defines a curried function: a function of one parameter “a” that, once invoked, will return a function of one parameter “b” that, once invoked, will return the sum of a+b&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="font-family: inherit;"&gt;the latter entry named “r” which invokes the curried function with a=1 and b=2.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="font-family: inherit;"&gt;Albeit this is potentially a weird looking FEEL expression, we are not surprised once executed r = 3.&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="font-family: inherit;"&gt;We can do equivalently by using DMN Boxed Expression constructs:&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-te_EmOZpMpA/XpV6_aZ6XRI/AAAAAAAAcsk/WPRoN2lB6-8dL1fEADyEuwsAGzOumku9gCNcBGAsYHQ/s1600/image7.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="629" data-original-width="918" height="438" src="https://1.bp.blogspot.com/-te_EmOZpMpA/XpV6_aZ6XRI/AAAAAAAAcsk/WPRoN2lB6-8dL1fEADyEuwsAGzOumku9gCNcBGAsYHQ/s640/image7.png" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="font-family: inherit;"&gt;This is a BKM node named “curried sum”; it is a DMN Invocable of one parameter “a” that, once invoked, will return a function of one parameter “b” that, once invoked, returns the sum of a+b.&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: inherit;"&gt;Again, we are not surprised once executed&amp;nbsp;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;curried sum(1)(2) = 3&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;h2&gt;&lt;span style="font-family: inherit;"&gt;Y Combinator: recursion without recursion support&lt;/span&gt;&lt;/h2&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="font-family: inherit;"&gt;Let’s go back for a moment to the earlier recursive function example; we overlooked the fact if it’s actually formally possible for a function to call itself by its name in DMN: the DMN specification does not explicitly support this, but it doesn’t explicitly forbid it either. In other terms, recursion support is not formally specified.&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="font-family: inherit;"&gt;What-if we still needed to define a recursive function, but we found the road was still under construction, missing that formal recursion support? We can use a functional device, called the “&lt;a href="https://youtu.be/9T8A89jgeTI" target="_blank"&gt;Y Combinator&lt;/a&gt;” which allows anonymous functions to achieve recursion without relying on self-invocation by its own (unexisting) name.&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="font-family: inherit;"&gt;Let’s look at an example; we can define the Y Combinator in DMN as follows:&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-w8ACy3InpEY/XpV7-mjlEKI/AAAAAAAAcs0/J52_N9IuXSMRwWfe9tnQVCUcIP3YCavJQCNcBGAsYHQ/s1600/image1.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="629" data-original-width="918" height="438" src="https://1.bp.blogspot.com/-w8ACy3InpEY/XpV7-mjlEKI/AAAAAAAAcs0/J52_N9IuXSMRwWfe9tnQVCUcIP3YCavJQCNcBGAsYHQ/s640/image1.png" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;span style="font-family: inherit;"&gt;It is potentially a weird looking function :) let’s assume this was defined for us, and we can just make use of it.&amp;nbsp;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: inherit;"&gt;We can use it to re-define the factorial calculation as:&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-wnZ5nkrZNos/XpV7PdWwmFI/AAAAAAAAcsw/AdxzXjlivo8EmMAgqn7inBl6Cecz-KxcgCEwYBhgLKs0DAMBZVoBC7E0N4Z_1qy6iliWp5gTsLdbwGv4Dq1ZRByEW5TRQIOQ4awIJrTzHn4fZTgfIgj6bG39il4gzuxC8zxoh1JrtxDyprDP3nBGxpEcUrlbX1VxjQai4t9tPETevqdldE6pCMYfAKWXlVEZGBuzi7YOTAn6JmFXVLqMwSQi5Z9x93XG6exDA4J5d_NuO8g4IHGHpl02k4RBOLKsNJYYvm-btV8haF2h3_wf-9yqpyt8xN7wZ2TOFqpFGoGuZWDAQ39oTILgzGg3l8FB3sId6_4YZmyhWj8HrNDDsxADECouEVG4d-hBqWs7C9OURYYBdAAqkNDASSnzD-1EHOAkPEzNb-ATJCLJ2k9b0UdZaRwRRVgbWA6Fd06gT7HxYJRVUYNST_8VhZlD8u1-tdi16pmAygJqzsAZ4Xlrr8qBN__hOZoCKd-Bbv2T2djdxo8njcapAyoYxWpIG2sfWoCu0fr-C7WfldiZHh5io_QWfRwQXz9b1O7H7PTPLfjerPpCmp9zs6OkDYEzMfny61VIHPuibRXjZPTYXGZzgM9u4RILAJ5i4hZjlv2GNq8aM4wj7rCejuKfWW76PpCfCbq817kSfBT5GtIDGP8gwvfzV9AU/s1600/image5.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="629" data-original-width="918" height="438" src="https://1.bp.blogspot.com/-wnZ5nkrZNos/XpV7PdWwmFI/AAAAAAAAcsw/AdxzXjlivo8EmMAgqn7inBl6Cecz-KxcgCEwYBhgLKs0DAMBZVoBC7E0N4Z_1qy6iliWp5gTsLdbwGv4Dq1ZRByEW5TRQIOQ4awIJrTzHn4fZTgfIgj6bG39il4gzuxC8zxoh1JrtxDyprDP3nBGxpEcUrlbX1VxjQai4t9tPETevqdldE6pCMYfAKWXlVEZGBuzi7YOTAn6JmFXVLqMwSQi5Z9x93XG6exDA4J5d_NuO8g4IHGHpl02k4RBOLKsNJYYvm-btV8haF2h3_wf-9yqpyt8xN7wZ2TOFqpFGoGuZWDAQ39oTILgzGg3l8FB3sId6_4YZmyhWj8HrNDDsxADECouEVG4d-hBqWs7C9OURYYBdAAqkNDASSnzD-1EHOAkPEzNb-ATJCLJ2k9b0UdZaRwRRVgbWA6Fd06gT7HxYJRVUYNST_8VhZlD8u1-tdi16pmAygJqzsAZ4Xlrr8qBN__hOZoCKd-Bbv2T2djdxo8njcapAyoYxWpIG2sfWoCu0fr-C7WfldiZHh5io_QWfRwQXz9b1O7H7PTPLfjerPpCmp9zs6OkDYEzMfny61VIHPuibRXjZPTYXGZzgM9u4RILAJ5i4hZjlv2GNq8aM4wj7rCejuKfWW76PpCfCbq817kSfBT5GtIDGP8gwvfzV9AU/s640/image5.png" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;span style="font-family: inherit;"&gt;We can notice the body of the “fac” function definition is overall the same; however, this is not any longer a function invoking itself by its name: there is no trace of a call to “fac(...)” in the body of the function!&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: inherit;"&gt;Naturally, there is still a form of recursion happening, but this time is leveraging the name of the parameters which are in scope of the closure: “f”.&amp;nbsp;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: inherit;"&gt;The result works as expected:&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;fac(3) = 6&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="font-family: inherit;"&gt;We can take a look at another example, defining the Fibonacci sequence using the Y Combinator in DMN:&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-9ZLCCXNYF1A/XpV8JcTgGFI/AAAAAAAAcs4/1ZkteeJJ2sUYWfAeev6YbtkkgznE81T4ACNcBGAsYHQ/s1600/image8.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="629" data-original-width="918" height="438" src="https://1.bp.blogspot.com/-9ZLCCXNYF1A/XpV8JcTgGFI/AAAAAAAAcs4/1ZkteeJJ2sUYWfAeev6YbtkkgznE81T4ACNcBGAsYHQ/s640/image8.png" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;span style="font-family: inherit;"&gt;We notice again there is no call to “fib(...)” in the function body, yet recursion for the calculation of the Fibonacci sequence is performed thanks to the use of the Y Combinator.&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: inherit;"&gt;Once again, the result works as expected:&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;fib(5) = [1, 1, 2, 3, 5]&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="font-family: inherit;"&gt;For extra fun, we can re-define the Y Combinator using where possible the DMN Boxed Expression forms. This is an interesting exercise to see how closures are applied in their boxed variant. The Y Combinator definition could be refactored as:&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-Fs6H16uviFE/XpV83HIwjuI/AAAAAAAActE/amoqRBw8IlcHnD-zAqTSK_Sp5yklUe0VQCNcBGAsYHQ/s1600/image6.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="895" data-original-width="978" height="584" src="https://1.bp.blogspot.com/-Fs6H16uviFE/XpV83HIwjuI/AAAAAAAActE/amoqRBw8IlcHnD-zAqTSK_Sp5yklUe0VQCNcBGAsYHQ/s640/image6.png" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="font-family: inherit;"&gt;and that would yield again the same expected and correct results.&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="font-family: inherit;"&gt;For (extra (extra fun)), we can re-define once more the Y Combinator in a single FEEL expression to calculate for instance the factorial of 4:&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;{ Y: function(f) (function(x) x(x))(function(y) f(function(x) y(y)(x))), fac: Y(function(f) function(n) if n &amp;gt; 1 then n * f(n-1) else 1), fac4: fac(4) }.fac4&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="font-family: inherit;"&gt;The result is unsurprisingly: 24.&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;h2&gt;&lt;span style="font-family: inherit;"&gt;Conclusion&lt;/span&gt;&lt;/h2&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="font-family: inherit;"&gt;In this post, we have seen a basic example of recursion in DMN, and how to leverage recursion support in the engine is very simple to use; &lt;b&gt;engine recursion support is the approach we recommend&lt;/b&gt; to achieve recursion DMN: give the function a name, and in the body of the function make use of that name to invoke itself. In the example, we have named the function “fac”, then we invoked “fac(...)” in the body of the function itself.&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: inherit;"&gt;This approach is very practical, easy to model in DMN and works just fine.&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="font-family: inherit;"&gt;We have also seen how DMN and FEEL do indeed support curried function definition and invocation. FEEL is (also) a functional language; all these properties allow us to define in DMN and use the Y Combinator, a functional device to achieve recursion without recursion support!&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="font-family: inherit;"&gt;I personally found these exercises very interesting to apply functional programming concepts in DMN, while at the same time making sure the engine worked as expected. I would like to say special thanks to my colleagues Edoardo Vacchi and Luca Molteni for their support while discussing the Y Combinator and Currying functions.&amp;nbsp;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="font-family: inherit;"&gt;Interested in DMN?&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: inherit;"&gt;If you didn’t know about DMN before, you found this post interesting but looking for a gentle introduction to the DMN standard, we have just the right crash course on DMN, freely available for you at:&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: inherit;"&gt;&lt;a href="http://learn-dmn-in-15-minutes.com/"&gt;http://learn-dmn-in-15-minutes.com&lt;/a&gt;&amp;nbsp;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="font-family: inherit;"&gt;You can find additional information on the Drools website &lt;/span&gt;&lt;a href="https://drools.org/learn/dmn.html" style="font-family: inherit;" target="_blank"&gt;here&lt;/a&gt;&lt;span style="font-family: inherit;"&gt;. Don’t hesitate to contact us for more information.&lt;/span&gt;&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.athico.com/~ff/DroolsAtom?a=0x3AY7HRnIA:AxjiBUYYNmA:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/DroolsAtom?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.athico.com/~ff/DroolsAtom?a=0x3AY7HRnIA:AxjiBUYYNmA:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/DroolsAtom?i=0x3AY7HRnIA:AxjiBUYYNmA:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.athico.com/~ff/DroolsAtom?a=0x3AY7HRnIA:AxjiBUYYNmA:dnMXMwOfBR0"&gt;&lt;img src="http://feeds.feedburner.com/~ff/DroolsAtom?d=dnMXMwOfBR0" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.athico.com/~ff/DroolsAtom?a=0x3AY7HRnIA:AxjiBUYYNmA:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/DroolsAtom?i=0x3AY7HRnIA:AxjiBUYYNmA:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.athico.com/~ff/DroolsAtom?a=0x3AY7HRnIA:AxjiBUYYNmA:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/DroolsAtom?i=0x3AY7HRnIA:AxjiBUYYNmA:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.athico.com/~ff/DroolsAtom?a=0x3AY7HRnIA:AxjiBUYYNmA:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/DroolsAtom?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.athico.com/~ff/DroolsAtom?a=0x3AY7HRnIA:AxjiBUYYNmA:jWeZv7XsJd0"&gt;&lt;img src="http://feeds.feedburner.com/~ff/DroolsAtom?d=jWeZv7XsJd0" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/DroolsAtom/~4/0x3AY7HRnIA" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/FsOVQO8PrMA" height="1" width="1" alt=""/&gt;</content><summary>In this post, I would like to share interesting insights about recursion support in DMN and highlights how specific properties of the FEEL language enable functional programming constructs to be modeled in DMN. We are going to start from a basic example, in order to demonstrate how the Business Friendliness nature of the FEEL language and DMN constructs, allow us to tame an otherwise commonly unpl...</summary><dc:creator>Matteo Mortari</dc:creator><dc:date>2020-04-14T09:25:00Z</dc:date><feedburner:origLink>http://feeds.athico.com/~r/DroolsAtom/~3/0x3AY7HRnIA/DMN-FEEL-recursion-currying-YCombinator.html</feedburner:origLink></entry><entry><title>Capture database changes with Debezium Apache Kafka connectors</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/B-bchxWOncQ/" /><category term="Event-Driven" /><category term="Kubernetes" /><category term="Microservices" /><category term="Stream Processing" /><category term="Apache Kafka" /><category term="CDC" /><category term="change event" /><category term="debezium" /><category term="kafka connect" /><author><name>Hugo Guerrero</name></author><id>https://developers.redhat.com/blog/?p=704577</id><updated>2020-04-14T07:00:39Z</updated><published>2020-04-14T07:00:39Z</published><content type="html">&lt;p&gt;&lt;span style="font-weight: 400"&gt;Change data capture, or CDC, is a well-established software design pattern for a system that monitors and captures the changes in data so that other software can respond to those changes. CDC captures row-level changes to database tables and passes corresponding change events to a data streaming bus. Applications can read these change event streams and access these change events in the order in which they occurred.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400"&gt;Thus, change data capture helps to bridge traditional data stores and new cloud-native event-driven architectures. &lt;/span&gt;&lt;span style="font-weight: 400"&gt;Meanwhile, &lt;/span&gt;&lt;a target="_blank" rel="nofollow" href="https://debezium.io/"&gt;&lt;span style="font-weight: 400"&gt;Debezium&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400"&gt; is a set of distributed services that captures row-level changes in databases so that applications can see and respond to those changes. This general availability (GA) release from &lt;a href="https://developers.redhat.com/integration/"&gt;Red Hat Integration&lt;/a&gt; includes the following Debezium connectors for Apache Kafka: MySQL Connector, PostgreSQL Connector, MongoDB Connector, and SQL Server Connector.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span id="more-704577"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;img class=" aligncenter wp-image-704587 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2020/04/Debezium-Data-Replication-1024x345.png" src="https://developers.redhat.com/blog/wp-content/uploads/2020/04/Debezium-Data-Replication-1024x345.png" alt="Diagram showing where Debezium fits in Kafka infrastructure" width="640" height="216" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/04/Debezium-Data-Replication-1024x345.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/04/Debezium-Data-Replication-300x101.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/04/Debezium-Data-Replication-768x259.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/04/Debezium-Data-Replication.png 1054w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/p&gt; &lt;h2&gt;CDC and event-driven microservices with Debezium&lt;/h2&gt; &lt;p&gt;Debezium&amp;#8217;s log-based change data capture has the advantage of capturing all of the data changes that were registered in the database, providing a trustable source. There is no delay compared with querying the database or overhead. Debezium also provides a transparent mechanism for applications and data models, avoiding the need to pollute current systems design. Reading for the transaction log also offers a low overhead with no risk of missing any events compared with polling.&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400"&gt;Based on the popular &lt;a href="https://kafka.apache.org/documentation.html#connect" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;Apache Kafka Connect API&lt;/a&gt;, Debezium Apache Kafka connectors are suitable for deploying with &lt;a target="_blank" rel="nofollow" href="https://www.redhat.com/en/resources/amq-streams-datasheet"&gt;Red Hat AMQ Streams&lt;/a&gt; Kafka clusters. They record all events to a &lt;a href="https://developers.redhat.com/topics/event-driven/"&gt;Red Hat AMQ Streams&lt;/a&gt; Kafka cluster, and applications consume those events through AMQ Streams. &lt;/span&gt;&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400"&gt;Debezium also allows the capture of &lt;/span&gt;&lt;em&gt;delete&lt;/em&gt;&lt;span style="font-weight: 400"&gt; events, as well as information about the &lt;/span&gt;&lt;i&gt;&lt;span style="font-weight: 400"&gt;old record state&lt;/span&gt;&lt;/i&gt;&lt;span style="font-weight: 400"&gt; and other metadata that can then be shared as part of the event for further processing. Debezium change event structure includes information about the table&amp;#8217;s key along with information regarding the value with the previous state, current changes, and metadata info. These events can be serialized as the familiar JSON or Avro formats, while support for CloudEvents is coming in a future release.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400"&gt;Use cases where change data capture is especially useful include:&lt;/span&gt;&lt;/p&gt; &lt;ul&gt; &lt;li style="font-weight: 400"&gt;&lt;span style="font-weight: 400"&gt;Data replication to other databases in order to feed data to other teams, or as streams for analytics, data lakes, or data warehouses.&lt;/span&gt;&lt;/li&gt; &lt;li style="font-weight: 400"&gt;&lt;span style="font-weight: 400"&gt;Microservices data exchange to propagate data between different services without coupling, keeping optimized views locally, or for monolith-to-microservices evolutions.&lt;/span&gt;&lt;/li&gt; &lt;li style="font-weight: 400"&gt;&lt;span style="font-weight: 400"&gt;Auditing, cache invalidation, indexing for full-text search, updating CQRS read models, and more.&lt;/span&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;Get started with CDC Debezium Apache Kafka connectors&lt;/h2&gt; &lt;p&gt;Debezium Apache Kafka connectors are available through &lt;span style="font-weight: 400"&gt;&lt;a href="https://www.redhat.com/en/products/integration" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;Red Hat Integration&lt;/a&gt;, which o&lt;/span&gt;ffers a comprehensive set of integration and messaging technologies that connect applications and data across hybrid infrastructures. This agile, distributed, containerized, and API-centric solution provides service composition and orchestration, application connectivity and data transformation, real-time message streaming, change data capture, and API management—all combined with a cloud-native platform and toolchain to support the full spectrum of modern application development.&lt;/p&gt; &lt;p&gt;This Red Hat Integration release provides &lt;a href="https://access.redhat.com/support/policy/updates/jboss_notes" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;full support&lt;/a&gt; for Debezium connectors to capture changes from the MySQL Connector and PostgreSQL Connector. Connectors for MongoDB and SQL Server are now included and delivered as &lt;a href="https://access.redhat.com/support/offerings/techpreview" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;Technical Previews&lt;/a&gt;. &lt;span style="font-weight: 400"&gt;Also known as Red Hat Integration CDC connectors, Debezium provides access to the benefits of open source for the enterprise—like community-driven upstream innovation—delivered with enterprise-level support to help your organization safely use open source technology. &lt;/span&gt;&lt;span style="font-weight: 400"&gt;Check the complete &lt;/span&gt;&lt;a href="https://access.redhat.com/articles/4938181" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;&lt;span style="font-weight: 400"&gt;supported configurations&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400"&gt; for more information.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400"&gt;Get started by downloading the Red Hat Integration Debezium CDC connectors from the &lt;/span&gt;&lt;a href="https://access.redhat.com/jbossnetwork/restricted/listSoftware.html?product=red.hat.integration&amp;#38;downloadType=distributions" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;&lt;span style="font-weight: 400"&gt;Red Hat Customer Portal&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400"&gt;. Also, don’t forget to check out &lt;/span&gt;&lt;a href="https://developers.redhat.com/videos/youtube/QYbXDp4Vu-8/"&gt;&lt;span style="font-weight: 400"&gt;Gunnar Morling’s webinar on Debezium and Kafka&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400"&gt; from the DevNation Tech Talks series, or his &lt;/span&gt;&lt;a href="https://www.infoq.com/presentations/data-streaming-kafka-debezium/" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;&lt;span style="font-weight: 400"&gt;talk at QCon&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400"&gt;.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F14%2Fcapture-database-changes-with-debezium-apache-kafka-connectors%2F&amp;#38;linkname=Capture%20database%20changes%20with%20Debezium%20Apache%20Kafka%20connectors" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F14%2Fcapture-database-changes-with-debezium-apache-kafka-connectors%2F&amp;#38;linkname=Capture%20database%20changes%20with%20Debezium%20Apache%20Kafka%20connectors" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F14%2Fcapture-database-changes-with-debezium-apache-kafka-connectors%2F&amp;#38;linkname=Capture%20database%20changes%20with%20Debezium%20Apache%20Kafka%20connectors" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F14%2Fcapture-database-changes-with-debezium-apache-kafka-connectors%2F&amp;#38;linkname=Capture%20database%20changes%20with%20Debezium%20Apache%20Kafka%20connectors" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F14%2Fcapture-database-changes-with-debezium-apache-kafka-connectors%2F&amp;#38;linkname=Capture%20database%20changes%20with%20Debezium%20Apache%20Kafka%20connectors" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F14%2Fcapture-database-changes-with-debezium-apache-kafka-connectors%2F&amp;#38;linkname=Capture%20database%20changes%20with%20Debezium%20Apache%20Kafka%20connectors" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F14%2Fcapture-database-changes-with-debezium-apache-kafka-connectors%2F&amp;#38;linkname=Capture%20database%20changes%20with%20Debezium%20Apache%20Kafka%20connectors" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F14%2Fcapture-database-changes-with-debezium-apache-kafka-connectors%2F&amp;#038;title=Capture%20database%20changes%20with%20Debezium%20Apache%20Kafka%20connectors" data-a2a-url="https://developers.redhat.com/blog/2020/04/14/capture-database-changes-with-debezium-apache-kafka-connectors/" data-a2a-title="Capture database changes with Debezium Apache Kafka connectors"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/04/14/capture-database-changes-with-debezium-apache-kafka-connectors/"&gt;Capture database changes with Debezium Apache Kafka connectors&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/B-bchxWOncQ" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Change data capture, or CDC, is a well-established software design pattern for a system that monitors and captures the changes in data so that other software can respond to those changes. CDC captures row-level changes to database tables and passes corresponding change events to a data streaming bus. Applications can read these change event streams [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/04/14/capture-database-changes-with-debezium-apache-kafka-connectors/"&gt;Capture database changes with Debezium Apache Kafka connectors&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><post-id xmlns="com-wordpress:feed-additions:1">704577</post-id><dc:creator>Hugo Guerrero</dc:creator><dc:date>2020-04-14T07:00:39Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/04/14/capture-database-changes-with-debezium-apache-kafka-connectors/</feedburner:origLink></entry><entry><title>Running an event-driven health management business process through end user scenarios: Part 2</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/Ii5dDiudUao/" /><category term="Event-Driven" /><category term="Java" /><category term="Modern App Dev" /><category term="Stream Processing" /><category term="Apache Kafka" /><category term="business automation" /><category term="business process management" /><category term="jboss" /><category term="jBPM" /><author><name>mcarioli</name></author><id>https://developers.redhat.com/blog/?p=691237</id><updated>2020-04-14T07:00:18Z</updated><published>2020-04-14T07:00:18Z</published><content type="html">&lt;p&gt;If you read &lt;a href="https://developers.redhat.com/blog/2020/03/31/running-an-event-driven-health-management-business-process-through-a-few-scenarios-part-1/" target="_blank" rel="noopener noreferrer"&gt;the first article in this series&lt;/a&gt;, then you already set up the example application you&amp;#8217;ll need for this article. If you have not set up the population health management application, you should do that before continuing. In this article, we&amp;#8217;ll run a few business processes through our event- and business-process-driven application to test it out.&lt;/p&gt; &lt;h2&gt;The happy-path scenario&lt;/h2&gt; &lt;p&gt;The most important thing you can learn from this article is how to wire the user interface (UI) together with the back end of a business application driven by a &lt;a href="https://www.jbpm.org/" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;jBPM&lt;/a&gt; business process. Wiring these components together is not well-documented, and might take trial and error to get right.&lt;/p&gt; &lt;p&gt;If you are a business-process developer, you can easily validate a business-process scenario by running it through jBPM Business Central. Doing that won&amp;#8217;t help you much if you are a UI developer, however, and need to build or customize a user-facing business application.&lt;/p&gt; &lt;p&gt;In this case of the population health management application, the business process you developed drives one or possibly several applications where the end-user is a family doctor, pharmacist, or insurance agent. Each of them needs to access member records.&lt;/p&gt; &lt;p&gt;Your task is to wire the front-end application used by each of these parties to a single business process running in the jBPM process server, also known as the &lt;em&gt;KieServer&lt;/em&gt;. This server uses a REST API to expose a &lt;a href="http://petstore.swagger.io/?url=https://raw.githubusercontent.com/ally-jarrett/pam-spec/master/v7.0/pam-swagger.json" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;variety of operations&lt;/a&gt;. For the purpose of this article, calls to the KieServer REST API will use basic authentication. In real life, it is more likely that you would use a stronger authentication mechanism, such as &lt;a href="https://oauth.net/" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;OAuth&lt;/a&gt; implemented in &lt;a href="https://www.keycloak.org/" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;Keycloak&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For the remainder of this article, I will use the &lt;a href="https://curl.haxx.se/docs/manual.html" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;cURL&lt;/a&gt; command to demonstrate how to call a REST API from an example end-user application UI. The &lt;code&gt;cURL&lt;/code&gt; command is available from both the Linux command-line interface (CLI) and a Windows PowerShell. The particular way that you call a REST API when you develop or customize the UI for end-user applications will vary.&lt;/p&gt; &lt;p&gt;You can quickly get some basic information about the server by &lt;a href="https://gist.github.com/mauriziocarioli/5d1379db0204f9e73a33f31c33407c43#file-getserver-sh" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;running&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;curl --user kieserver:secret \ --location --request GET 'http://localhost:8080/kie-server/services/rest/server?Accept=application/json' \ --header 'Accept: application/json' &lt;/pre&gt; &lt;p&gt;The response will be, &lt;a href="https://gist.github.com/mauriziocarioli/2bc9eec14bda0fd2c9bcc7f91d14481c#file-getserver-json" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;for example&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;{ "type": "SUCCESS", "msg": "Kie Server info", "result": { "kie-server-info": { "id": "sample-server", "version": "7.33.0.Final", "name": "sample-server", "location": "http://localhost:8080/kie-server/services/rest/server", "capabilities": [ "KieServer", "BRM", "BPM", "CaseMgmt", "BPM-UI", "BRP", "DMN", "Swagger", "Prometheus" ], "messages": [ { "severity": "INFO", "timestamp": { "java.util.Date": 1580476689750 }, "content": [ "Server KieServerInfo{serverId='sample-server', version='7.33.0.Final', name='sample-server', location='http://localhost:8080/kie-server/services/rest/server', capabilities=[KieServer, BRM, BPM, CaseMgmt, BPM-UI, BRP, DMN, Swagger, Prometheus]', messages=null', mode=DEVELOPMENT}started successfully at Fri Jan 31 08:18:09 EST 2020" ] } ], "mode": "DEVELOPMENT" } } } &lt;/pre&gt; &lt;p&gt;Notice the list of the server&amp;#8217;s capabilities.&lt;/p&gt; &lt;p&gt;Now, &lt;a href="https://gist.github.com/mauriziocarioli/7ed015fd324a2e268af5866c72a9e9d0" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;get the list of deployment units&lt;/a&gt; on this server (also known as &lt;a href="https://docs.jboss.org/jbpm/release/latest/jbpm-docs/html_single/#_creating_a_kie_container" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;Kie containers&lt;/a&gt;, which are not to be confused with &lt;a href="https://docs.openshift.com/enterprise/3.0/architecture/core_concepts/containers_and_images.html" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;OCS containers&lt;/a&gt; or &lt;a href="https://www.docker.com/resources/what-container" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;Docker containers&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;curl --user kieserver:secret \ --location --request GET 'http://localhost:8080/kie-server/services/rest/server/containers' \ --header 'Accept: application/json' &lt;/pre&gt; &lt;p&gt;The &lt;a href="https://gist.github.com/mauriziocarioli/d1dcb0a0be8275c1007170510c21c909" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;responses&lt;/a&gt; are the PHM-Model and PHM-Processes containers:&lt;/p&gt; &lt;pre&gt;{ "type": "SUCCESS", "msg": "List of created containers", "result": { "kie-containers": { "kie-container": [ { "container-id": "PHM-Processes_1.0.0-SNAPSHOT", "release-id": { "group-id": "com.health-insurance", "artifact-id": "PHM-Processes", "version": "1.0.0-SNAPSHOT" }, "resolved-release-id": { "group-id": "com.health-insurance", "artifact-id": "PHM-Processes", "version": "1.0.0-SNAPSHOT" }, "status": "STARTED", "scanner": { "status": "DISPOSED", "poll-interval": null }, "config-items": [ { "itemName": "KBase", "itemValue": "", "itemType": "BPM" }, { "itemName": "KSession", "itemValue": "", "itemType": "BPM" }, { "itemName": "MergeMode", "itemValue": "MERGE_COLLECTIONS", "itemType": "BPM" }, { "itemName": "RuntimeStrategy", "itemValue": "PER_PROCESS_INSTANCE", "itemType": "BPM" } ], "messages": [ { "severity": "INFO", "timestamp": { "java.util.Date": 1580477082631 }, "content": [ "Container PHM-Processes_1.0.0-SNAPSHOT successfully created with module com.health-insurance:PHM-Processes:1.0.0-SNAPSHOT." ] } ], "container-alias": "PHM-Processes" }, { "container-id": "PHM-Model_1.0.0-SNAPSHOT", "release-id": { "group-id": "com.health-insurance", "artifact-id": "PHM-Model", "version": "1.0.0-SNAPSHOT" }, "resolved-release-id": { "group-id": "com.health-insurance", "artifact-id": "PHM-Model", "version": "1.0.0-SNAPSHOT" }, "status": "STARTED", "scanner": { "status": "DISPOSED", "poll-interval": null }, "config-items": [ { "itemName": "KBase", "itemValue": "", "itemType": "BPM" }, { "itemName": "KSession", "itemValue": "", "itemType": "BPM" }, { "itemName": "MergeMode", "itemValue": "MERGE_COLLECTIONS", "itemType": "BPM" }, { "itemName": "RuntimeStrategy", "itemValue": "SINGLETON", "itemType": "BPM" } ], "messages": [ { "severity": "INFO", "timestamp": { "java.util.Date": 1580476858851 }, "content": [ "Container PHM-Model_1.0.0-SNAPSHOT successfully created with module com.health-insurance:PHM-Model:1.0.0-SNAPSHOT." ] } ], "container-alias": "PHM-Model" } ] } } } &lt;/pre&gt; &lt;p&gt;The response contains a lot of information for each Kie container but right now you only need the names. In the REST API calls to the PHM-Processes Kie container that follow, use the alias &lt;code&gt;PHM-Processes&lt;/code&gt;. There is no need to use the full container id &lt;code&gt;PHM-Processes_1.0.0-SNAPSHOT&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Assume that a certain trigger for a given member is received on a data stream, like &lt;a href="https://developers.redhat.com/blog/tag/apache-kafka/" rel="noopener noreferrer"&gt;Apache Kafka&lt;/a&gt;, by the PHM business application&amp;#8217;s data integration layer. (In this case, the integration component is &lt;a href="https://developers.redhat.com/blog/tag/apache-camel/" rel="noopener noreferrer"&gt;Apache Camel&lt;/a&gt;.) As shown in Figure 1, a Camel event-driven consumer is subscribed to a channel in the Kafka stream. Whenever a trigger event is received, Camel starts a Trigger process instance in jBPM.&lt;/p&gt; &lt;div id="attachment_691297" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-691297" class="wp-image-691297 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/03/PHM-High-Level-Architecture-1024x403.png" alt="Chart showing the high level architecture of the PHM application." width="640" height="252" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/03/PHM-High-Level-Architecture-1024x403.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/03/PHM-High-Level-Architecture-300x118.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/03/PHM-High-Level-Architecture-768x302.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/03/PHM-High-Level-Architecture.png 1593w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-691297" class="wp-caption-text"&gt;Figure 1: The PHM application&amp;#8217;s high-level architecture.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;In my view, a BPM should orchestrate business activities such as human tasks, decision tasks, and services that are immediately ancillary to such business tasks. Data integration should not be the job of the BPM and is best left to tools specifically designed for that purpose. Let Camel do the heavy lifting and let jBPM focus on what is real business logic as opposed to technical data operations. The goal is to have a scalable, robust, agile PHM solution not cramming every function into one swiss-knife tool.&lt;/p&gt; &lt;p&gt;Now, start the Trigger process. In real life, Camel will react to the trigger by starting the Trigger process in jBPM with &lt;a href="https://gist.github.com/mauriziocarioli/71dc46001fed17b2b284b1c2d4d74d21" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;the following REST API&lt;/a&gt;, where you only need to pass the member id and the trigger id:&lt;/p&gt; &lt;pre&gt;curl --user kieserver:secret \ --location --request POST 'http://localhost:8080/kie-server/services/rest/server/containers/PHM-Processes/processes/PHM-Processes.Trigger/instances' \ --header 'Content-Type: application/json' \ --data-raw '{ "pMemberId": "123", "pTriggerId": "R383" }' &lt;/pre&gt; &lt;p&gt;The response will be the process instance id.&lt;/p&gt; &lt;p&gt;Now put your business process developer hat back on. Go to &lt;strong&gt;Business Central&lt;/strong&gt;, find the &lt;strong&gt;Manage&lt;/strong&gt; section, and click &lt;strong&gt;process instances&lt;/strong&gt;, as shown in Figure 2.&lt;/p&gt; &lt;div id="attachment_691317" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-691317" class="size-large wp-image-691317" src="https://developers.redhat.com/blog/wp-content/uploads/2020/03/2020-02-24_11-35-20-1024x448.png" alt="Business Central - Manage - process instances." width="640" height="280" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/03/2020-02-24_11-35-20-1024x448.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/03/2020-02-24_11-35-20-300x131.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/03/2020-02-24_11-35-20-768x336.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/03/2020-02-24_11-35-20.png 1166w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-691317" class="wp-caption-text"&gt;Figure 2: Go to &lt;strong&gt;Business Central&lt;/strong&gt; to manage your process instances.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Here, you will see three process instances. In addition to the Trigger process instance, you will see the two Task process instances that do not have a predecessor (Figure 3).&lt;/p&gt; &lt;div id="attachment_691327" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/03/2020-02-24_11-35-52.png"&gt;&lt;img aria-describedby="caption-attachment-691327" class="wp-image-691327 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/03/2020-02-24_11-35-52-1024x448.png" alt="Business Central - Manage - Process instances" width="640" height="280" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/03/2020-02-24_11-35-52-1024x448.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/03/2020-02-24_11-35-52-300x131.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/03/2020-02-24_11-35-52-768x336.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/03/2020-02-24_11-35-52.png 1166w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-691327" class="wp-caption-text"&gt;Figure 3: Find specific process instances in the &lt;strong&gt;Manage&lt;/strong&gt; window.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Click on the Trigger process instance and look through the information available. If you are a business process developer, you will find the process diagram shown in Figure 4 useful when quickly debugging or testing. It shows where process execution is in a waiting state (red) and which activities or nodes have been completed (grey).&lt;/p&gt; &lt;div id="attachment_691337" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/03/2020-02-24_11-38-16.png"&gt;&lt;img aria-describedby="caption-attachment-691337" class="wp-image-691337 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/03/2020-02-24_11-38-16-1024x411.png" alt="Trigger process instance diagram" width="640" height="257" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/03/2020-02-24_11-38-16-1024x411.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/03/2020-02-24_11-38-16-300x120.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/03/2020-02-24_11-38-16-768x308.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/03/2020-02-24_11-38-16.png 1504w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-691337" class="wp-caption-text"&gt;Figure 4: Determine the state of a process in the &lt;strong&gt;Process Diagram&lt;/strong&gt;.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;However, the most powerful tools available to test and debug jBPM business processes and Drools business rules are the event-listener interfaces. No process should be deployed without them—check out this &lt;a href="https://gist.github.com/mauriziocarioli/4879bbd0ce366e3b1c07b41c96d21ab9" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;printout of events captured by the custom event listeners at the start of the Trigger process&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;What is captured and how it is displayed is entirely up to you. Typically you would store this tracing data into a database so that you can easily extract reports from it when needed.&lt;/p&gt; &lt;p&gt;Now, put your user interface developer hat back on. Peter is the family physician for the insurance member whose trigger is being processed. Peter has logged into the application on his office PC or perhaps on his smartphone or tablet. You need to know the tasks Peter is a potential owner of &lt;a href="https://gist.github.com/mauriziocarioli/79db8bd88e95deede5bc1ea966359f46" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;through the REST API&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;curl --user Peter:secret \ --location --request GET 'http://localhost:8080/kie-server/services/rest/server/containers/PHM-Processes/forms/tasks/1?lang=en&amp;#38;type=ANY&amp;#38;marshallContent=true' \ --header 'Accept: application/json' &lt;/pre&gt; &lt;p&gt;Since you are building a custom UI (or integrating with an already existing UI) you don&amp;#8217;t need most of the information &lt;a href="https://gist.github.com/mauriziocarioli/dac82e7f205c0428442ea934ae4c6e05" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;in the response&lt;/a&gt;. What you need is just the list of variables submitted by the form:&lt;/p&gt; &lt;pre&gt; "properties": [ { "name": "answer", "typeInfo": { "type": "BASE", "className": "java.lang.String", "multiple": false }, "metaData": { "entries": [] } }, { "name": "na", "typeInfo": { "type": "BASE", "className": "java.lang.Boolean", "multiple": false }, "metaData": { "entries": [] } }, { "name": "naText", "typeInfo": { "type": "BASE", "className": "java.lang.String", "multiple": false }, "metaData": { "entries": [] } } ] &lt;/pre&gt; &lt;p&gt;Then, you can submit the variables&amp;#8217; values by first defining the task&amp;#8217;s output with &lt;a href="https://gist.github.com/mauriziocarioli/f990c6d2cdf92a9d2b51f9d1dce79f40" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;this REST API&lt;/a&gt;, where (as an example) you only submit the answer variable:&lt;/p&gt; &lt;pre&gt;curl --user Peter:secret \ --location --request PUT 'http://localhost:8080/kie-server/services/rest/server/containers/PHM-Processes/tasks/1/contents/output' \ --header 'Content-Type: application/json' \ --header 'Accept: application/json' \ --data-raw '{ "answer": "Hello." }' &lt;/pre&gt; &lt;p&gt;Then complete the task with &lt;a href="https://gist.github.com/mauriziocarioli/2c16976090e6c47f23edf3f8837d73c2" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;the REST API&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;curl --user Peter:secret \ --location --request PUT 'http://localhost:8080/kie-server/services/rest/server/containers/PHM-Processes/tasks/1/states/completed' \ --header 'Content-Type: application/json' \ --header 'Accept: application/json' \ --data-raw '' &lt;/pre&gt; &lt;p&gt;Peter&amp;#8217;s task needs to be hard-closed. That is, according to our customer requirements, merely completing the task within the BPM system is not sufficient to consider the task closed. A signal from an external system must be received to actually close the task. The external system must be programmed to use &lt;a href="https://gist.github.com/mauriziocarioli/659d4de7c3a48a48712c2285631b9258" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;the following REST API&lt;/a&gt; to send the appropriate signal:&lt;/p&gt; &lt;pre&gt;curl --user externalsystem:secret \ --location --request POST 'http://localhost:8080/kie-server/services/rest/server/containers/PHM-Processes/processes/instances/4/signal/hard_close' \ --header 'Content-Type: application/json' \ --data-raw '{}' &lt;/pre&gt; &lt;p&gt;Hard closing Peter&amp;#8217;s task will start two more task processes that have Peter&amp;#8217;s task as the predecessor. The other actors in the scenario are the insurance member Mary, the pharmacist Robert, and the insurance channel worker Charlie.&lt;/p&gt; &lt;p&gt;You can repeat the steps that you followed by playing Peter for each of the other actors. I will not describe these steps for you here. Bear in mind that according to the data provided by the Get the Data service, only Charlie&amp;#8217;s task requires hard-closing. The other two tasks can be soft-closed, they do not need a signal from an external system to be considered closed.&lt;/p&gt; &lt;p&gt;This completes the &amp;#8220;Happy Path Scenario.&amp;#8221;&lt;/p&gt; &lt;h2&gt;The reminder scenario&lt;/h2&gt; &lt;p&gt;In this scenario, Charlie fails to take action within the period of time passed in the attribute &lt;code&gt;Task&lt;/code&gt;. A &lt;code&gt;reminderInitiation&lt;/code&gt; and a reminder email is sent as a result. In fact, an email should be sent with a frequency given by the attribute &lt;code&gt;Task.reminderFrequency&lt;/code&gt;. The Task object with all its attributes is provided for each task by the Get the Data service. The email should stop after the task is completed.&lt;/p&gt; &lt;p&gt;The email is sent by a custom work item handler. In the PHM-Processes project&amp;#8217;s deployment descriptor, you can see that the parameters of &lt;code&gt;EmailWorkItemHandler&lt;/code&gt; are system environment variables:&lt;/p&gt; &lt;p&gt;This is because you don&amp;#8217;t want the email server credentials to be written there for security reasons. You have to set the system environment variables &lt;code&gt;DEMO_SMTP_SERVER&lt;/code&gt;, &lt;code&gt;DEMO_SMTP_PORT&lt;/code&gt;, &lt;code&gt;DEMO_SMTP_USER&lt;/code&gt;, and &lt;code&gt;DEMO_SMTP_PWD&lt;/code&gt; to the corresponding values for the email server that you will be using. For example, you could use a mock server such as &lt;a href="https://mailtrap.io/" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;mailtrap.io&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Now, go to the REST API project that provides the mock Get the Data service, open the &lt;code&gt;app.js&lt;/code&gt; file, find the data for Charlie&amp;#8217;s task, and change the value of the attributes &lt;code&gt;reminderInitiation&lt;/code&gt; and &lt;code&gt;reminderFrequency&lt;/code&gt; to &lt;a href="https://gist.github.com/mauriziocarioli/016cf21fee2a58f0c189d098c28d29cb" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;the values below&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt; { task: { id: 58, origId: 'B143', suppressed: false, suppressionPeriod: '', expirationDate: '2020-12-31T12:00:00.000Z', close: 'HARD', reminderInitiation: 'PT60S', reminderFrequency: 'R/PT60S', escalationTimer: 'P90D', description: 'Getting Community Info' }, assignment: { actor: 'Charlie', channel: 'CCN', escalationActor: 'Marc', escalationChannel: 'CCN' }, reminder: { address: 'charlie@healthinsurance.com', body: 'XYZ', from: 'PHM@healthinsurance.com', subject: 'Reminder' } } &lt;/pre&gt; &lt;p&gt;The initial period of time is now 60 seconds instead of 15 days, and the frequency is 60 seconds instead of 15 days. This configuration will make it easier to test that the reminder is being sent. If you don&amp;#8217;t like these values just use whatever suits you.&lt;/p&gt; &lt;p&gt;After a few minutes, Charlie&amp;#8217;s email inbox will be full of reminder messages as shown in Figure 5.&lt;/p&gt; &lt;div id="attachment_691377" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/03/2020-03-01_09-30-56.png"&gt;&lt;img aria-describedby="caption-attachment-691377" class="wp-image-691377 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/03/2020-03-01_09-30-56-1024x424.png" alt="Charlie's email inbox" width="640" height="265" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/03/2020-03-01_09-30-56-1024x424.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/03/2020-03-01_09-30-56-300x124.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/03/2020-03-01_09-30-56-768x318.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/03/2020-03-01_09-30-56.png 1083w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-691377" class="wp-caption-text"&gt;Figure 5: The results in Charlie&amp;#8217;s email inbox.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Now have Charlie complete the task and check that the email barrage has stopped. Of course, you might as well follow what happens in &lt;strong&gt;Business Central&lt;/strong&gt; updating the diagrams of Charlie&amp;#8217;s Task and Reminder subprocesses.&lt;/p&gt; &lt;h2&gt;The escalation scenario&lt;/h2&gt; &lt;p&gt;By now, you should know how to run this scenario. Just change the escalation timer value to 60 seconds and see what happens. Bear in mind that this scenario depends on a task hard close and not on task completion, like the previous scenario.&lt;/p&gt; &lt;h2&gt;Conclusions&lt;/h2&gt; &lt;p&gt;By now, hopefully, you should have gained a solid understanding of how the example business process works, learned how to validate whether your implementation is correct or not, and learned how to wire the business application&amp;#8217;s user interface driven by the business process.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F14%2Frunning-an-event-driven-health-management-business-process-through-end-user-scenarios-part-2%2F&amp;#38;linkname=Running%20an%20event-driven%20health%20management%20business%20process%20through%20end%20user%20scenarios%3A%20Part%202" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F14%2Frunning-an-event-driven-health-management-business-process-through-end-user-scenarios-part-2%2F&amp;#38;linkname=Running%20an%20event-driven%20health%20management%20business%20process%20through%20end%20user%20scenarios%3A%20Part%202" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F14%2Frunning-an-event-driven-health-management-business-process-through-end-user-scenarios-part-2%2F&amp;#38;linkname=Running%20an%20event-driven%20health%20management%20business%20process%20through%20end%20user%20scenarios%3A%20Part%202" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F14%2Frunning-an-event-driven-health-management-business-process-through-end-user-scenarios-part-2%2F&amp;#38;linkname=Running%20an%20event-driven%20health%20management%20business%20process%20through%20end%20user%20scenarios%3A%20Part%202" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F14%2Frunning-an-event-driven-health-management-business-process-through-end-user-scenarios-part-2%2F&amp;#38;linkname=Running%20an%20event-driven%20health%20management%20business%20process%20through%20end%20user%20scenarios%3A%20Part%202" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F14%2Frunning-an-event-driven-health-management-business-process-through-end-user-scenarios-part-2%2F&amp;#38;linkname=Running%20an%20event-driven%20health%20management%20business%20process%20through%20end%20user%20scenarios%3A%20Part%202" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F14%2Frunning-an-event-driven-health-management-business-process-through-end-user-scenarios-part-2%2F&amp;#38;linkname=Running%20an%20event-driven%20health%20management%20business%20process%20through%20end%20user%20scenarios%3A%20Part%202" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F14%2Frunning-an-event-driven-health-management-business-process-through-end-user-scenarios-part-2%2F&amp;#038;title=Running%20an%20event-driven%20health%20management%20business%20process%20through%20end%20user%20scenarios%3A%20Part%202" data-a2a-url="https://developers.redhat.com/blog/2020/04/14/running-an-event-driven-health-management-business-process-through-end-user-scenarios-part-2/" data-a2a-title="Running an event-driven health management business process through end user scenarios: Part 2"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/04/14/running-an-event-driven-health-management-business-process-through-end-user-scenarios-part-2/"&gt;Running an event-driven health management business process through end user scenarios: Part 2&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/Ii5dDiudUao" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;If you read the first article in this series, then you already set up the example application you&amp;#8217;ll need for this article. If you have not set up the population health management application, you should do that before continuing. In this article, we&amp;#8217;ll run a few business processes through our event- and business-process-driven application to [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/04/14/running-an-event-driven-health-management-business-process-through-end-user-scenarios-part-2/"&gt;Running an event-driven health management business process through end user scenarios: Part 2&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><post-id xmlns="com-wordpress:feed-additions:1">691237</post-id><dc:creator>mcarioli</dc:creator><dc:date>2020-04-14T07:00:18Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/04/14/running-an-event-driven-health-management-business-process-through-end-user-scenarios-part-2/</feedburner:origLink></entry><entry><title>All Things Open 2020 - Sharing microservice mayhem, careers, and storytelling</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/YyTlbEMtEcU/all-things-open-2020-sharing-microservice-mayhem-careers-storytelling.html" /><category term="AppDev" scheme="searchisko:content:tags" /><category term="cloud" scheme="searchisko:content:tags" /><category term="conference" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-all_things_open_2020_sharing_microservice_mayhem_careers_and_storytelling</id><updated>2020-04-14T05:00:10Z</updated><published>2020-04-14T05:00:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://2020.allthingsopen.org/" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;" target="_blank"&gt;&lt;img border="0" data-original-height="487" data-original-width="1600" height="97" src="https://1.bp.blogspot.com/-dmvD_PFaUX4/Xmj-_dj1KII/AAAAAAAAw98/tssiVEHQ3mghyc6Re8gsIBo0W7AK2QfWwCNcBGAsYHQ/s320/ato2020.png" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;It's that time of year again, when the dynamic and exciting &lt;a href="https://2020.allthingsopen.org/" target="_blank"&gt;All Things Open call for papers&lt;/a&gt; hits your inbox.&lt;br /&gt;&lt;br /&gt;Last year there was almost 5000 attendees, so it's not just another event, but one dedicated to sharing all things in the open source world.&lt;br /&gt;&lt;br /&gt;In 2018 I &lt;a href="https://www.schabell.org/2018/10/all-things-open-2018-lightning-talk-slides.html" target="_blank"&gt;presented a main stage lighting talk&lt;/a&gt; on how to jump start your career in open source. That became the foundation of a talk I've been using to open a few events as a keynote.&lt;br /&gt;&lt;br /&gt;This year I wanted to take another run at joining you in Raleigh, NC from 18-20 October, so I've sent in a few of my top ideas to share with their potential audience.&lt;br /&gt;&lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;The following ideas are what I've submitted to the call for papers.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Reality Bites: 3 Misconceptions that Can Lead to Microservice Mayhem&lt;/b&gt;&lt;br /&gt;Microservices are core to organizations’ flexibility and agility in the digital world. But that doesn’t mean that microservices are right for every use case or even for every organization—at least, not right now. There is no doubt that microservices are becoming the mainstream. Within the next two years, 90% of all new apps will feature microservices architecture, according to “IDC FutureScape: Worldwide IT Industry 2019 Predictions.” Indeed, as organizations witness (and drive) more and more microservices success stories, they may feel compelled to join the race and accelerate their current microservices initiatives. Whether that is a good move or not depends not just on the readiness of the organization, but also on its willingness and ability to acknowledge some hard truths about the microservices model and culture. Let me take you on a tour of the reality behind three microservices misconceptions—and share real world implementation insights as to why that reality can sometimes bite.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;5 Questions Everyone Ignores with Microservices&lt;/b&gt;&lt;br /&gt;The daily hype is all around you. Microservices are a necessary step along the path to integration for a digitally successful future for your organization. Funny enough, when discussing the development impact while transitioning to microservices, there are five questions that keep popping up. This session covers the questions that everyone should ask about microservices. Join us for an hour of power, where real life developer experiences are used to highlight the lessons we're all learning as we transition our integration infrastructure into modern day microservices.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Open Key to Your Career&lt;/b&gt;&lt;br /&gt;It's not coincidence. It's not luck. It's not going to happen by itself, so what's the secret sauce? Understanding what makes a career in open source grow, what choices are crucial, and what actions accelerate or damage your open source future are sometimes hard to grasp. Learning to position, expand and grow your personal brand in the open source world is what this session provides. Be ready for your next step in open source. Join me for an hour of power where you'll be given a clear and easy to use plan for jump starting your open source career immediately.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Speaking Bites: 5 Traits Putting Your Audiences to Sleep&lt;/b&gt;&lt;br /&gt;Speaking to an audience is as old as time itself…. Since the beginning of humankind, we share our experiences, we teach, we inspire, we relate to stories as told all around us. They are told by elders, they are told by kids at the dinner table, they are written down in books, and they are captured on video or tape. One thing is certain, stories are being told, but what are your stories and how can you become adept at telling them? The problem is you're feeling insecure and unsure on stage or in that big meeting where you have to sway an audience with your story. Do you feel like you're losing them after five or ten minutes? In this session the attendee discovers five simple and easy to apply changes that she can start using immediately to improve their engagement factor. Find out what five traits you've been abusing. Find out that they're right in front of your eyes but you can't see them. Join this session and you'll soon stop putting your audiences to sleep!&lt;br /&gt;&lt;br /&gt;Now we cross our fingers and hope to see you in Raleigh soon!&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=TmbkH_d9K98:KRoa27ui1XI:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=TmbkH_d9K98:KRoa27ui1XI:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=TmbkH_d9K98:KRoa27ui1XI:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=TmbkH_d9K98:KRoa27ui1XI:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=TmbkH_d9K98:KRoa27ui1XI:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=TmbkH_d9K98:KRoa27ui1XI:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=TmbkH_d9K98:KRoa27ui1XI:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=TmbkH_d9K98:KRoa27ui1XI:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=TmbkH_d9K98:KRoa27ui1XI:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=TmbkH_d9K98:KRoa27ui1XI:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=TmbkH_d9K98:KRoa27ui1XI:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/TmbkH_d9K98" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/YyTlbEMtEcU" height="1" width="1" alt=""/&gt;</content><summary>It's that time of year again, when the dynamic and exciting All Things Open call for papers hits your inbox. Last year there was almost 5000 attendees, so it's not just another event, but one dedicated to sharing all things in the open source world. In 2018 I presented a main stage lighting talk on how to jump start your career in open source. That became the foundation of a talk I've been using t...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2020-04-14T05:00:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/TmbkH_d9K98/all-things-open-2020-sharing-microservice-mayhem-careers-storytelling.html</feedburner:origLink></entry><entry><title>Keycloak 9.0.3 released</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/o68TEv1uMuc/keycloak-903-released.html" /><category term="feed_group_name_keycloak" scheme="searchisko:content:tags" /><category term="feed_name_keycloak" scheme="searchisko:content:tags" /><category term="Keycloak Release" scheme="searchisko:content:tags" /><author><name>Keycloak</name></author><id>searchisko:content:id:jbossorg_blog-keycloak_9_0_3_released</id><updated>2020-04-14T00:00:00Z</updated><published>2020-04-14T00:00:00Z</published><content type="html">&lt;p&gt;To download the release go to &lt;a href="https://www.keycloak.org//downloads.html"&gt;Keycloak downloads&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;All resolved issues&lt;/h2&gt; &lt;p&gt;The full list of resolved issues are available in &lt;a href="https://issues.jboss.org/issues/?jql=project%20%3D%20keycloak%20and%20fixVersion%20%3D%209.0.3"&gt;JIRA&lt;/a&gt;&lt;/p&gt; &lt;h2&gt;Upgrading&lt;/h2&gt; &lt;p&gt;Before you upgrade remember to backup your database and check the &lt;a href="https://www.keycloak.org//docs/latest/upgrading/index.html"&gt;upgrade guide&lt;/a&gt; for anything that may have changed.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/o68TEv1uMuc" height="1" width="1" alt=""/&gt;</content><summary>To download the release go to Keycloak downloads. All resolved issues The full list of resolved issues are available in JIRA Upgrading Before you upgrade remember to backup your database and check the upgrade guide for anything that may have changed.</summary><dc:creator>Keycloak</dc:creator><dc:date>2020-04-14T00:00:00Z</dc:date><feedburner:origLink>https://www.keycloak.org//2020/04/keycloak-903-released.html</feedburner:origLink></entry><entry><title>Red Hat Data Grid 8.0 brings new server architecture, improved REST API, and more</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/-0FJRbUaStg/" /><category term="Big Data" /><category term="Kubernetes" /><category term="Modern App Dev" /><category term="Operator" /><category term="Data Grid" /><category term="microservices" /><category term="noSQL" /><category term="openshift" /><category term="runtimes" /><author><name>Syed M Shaaf</name></author><id>https://developers.redhat.com/blog/?p=703457</id><updated>2020-04-13T07:00:26Z</updated><published>2020-04-13T07:00:26Z</published><content type="html">&lt;p&gt;&lt;a href="https://developers.redhat.com/products/datagrid/overview"&gt;Red Hat Data Grid&lt;/a&gt; helps applications access, process, and analyze data at in-memory speed. Red Hat Data Grid 8.0 is included in the latest update to &lt;a href="https://www.redhat.com/en/products/runtimes" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;Red Hat Runtimes&lt;/a&gt;, providing a distributed in-memory, NoSQL datastore. This release includes a new &lt;a href="https://developers.redhat.com/topics/operators/"&gt;Operator&lt;/a&gt; for handling complex applications, a new server architecture that reduces memory consumption and increases security, a faster API with new features, a new CLI, and compatibility with a variety of observability tools.&lt;/p&gt; &lt;p&gt;Let&amp;#8217;s take a closer look at Data Grid 8.0 to see how this tool helps you move legacy applications and the new breed of microservices and functions toward the &lt;a href="https://www.redhat.com/en/topics/cloud-computing/what-is-hybrid-cloud" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;open hybrid cloud&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Operational intelligence Operator&lt;/h2&gt; &lt;p&gt;Red Hat Data Grid 8.0 introduces a fully supported Operator that provides operational intelligence, using &lt;a href="https://developers.redhat.com/topics/kubernetes/"&gt;Kubernetes&lt;/a&gt; APIs to handle operations and manage application lifecycles. As a result, it’s easier than ever before to deploy and manage complex applications—like distributed datastores—that you consume as services. They get upgraded automatically, with no need for human intervention.&lt;/p&gt; &lt;p&gt;Try the following documentation to create a Data Grid Operator subscription and get Data Grid 8.0 running in &lt;a href="https://developers.redhat.com/openshift/"&gt;Red Hat OpenShift&lt;/a&gt;: &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_data_grid/8.0/html-single/getting_started_with_data_grid_operator/" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;Getting Started with Data Grid Operator&lt;/a&gt; and &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_data_grid/8.0/html-single/running_data_grid_on_openshift/" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;Running Data Grid for OpenShift&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;New server architecture&lt;/h2&gt; &lt;p&gt;Data Grid Server 8.0 is built using cloud-native development best practices that deliver cloud-ready capabilities with a significantly reduced footprint. Compared with previous versions, Data Grid Server 8.0 reduces both disk usage and initial heap size up to 50%, leaving more memory for your data. As of this release, Data Grid Server is decoupled from &lt;a href="https://developers.redhat.com/products/eap"&gt;Red Hat JBoss Enterprise Application Platform&lt;/a&gt; (EAP), which simplifies configuration and reduces the attack surface for vulnerabilities.&lt;/p&gt; &lt;p&gt;Speaking of security, Data Grid Server 8.0 integrates with Red Hat SSO and offers much more robust support for other security mechanisms than it did before. You can find more details on setup and how-tos in &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_data_grid/8.0/html/data_grid_server_guide/index" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;the server configuration guide&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;See &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_data_grid/8.0/html-single/data_grid_server_guide/#start_server" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;Getting Started with Data Grid Server&lt;/a&gt; to create a running Data Grid cluster in under five minutes.&lt;/p&gt; &lt;h2&gt;Faster and richer REST API&lt;/h2&gt; &lt;p&gt;Red Hat Data Grid 8.0 introduces REST API v2, which provides 50% faster response rates than v1, along with new capabilities like:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Accessing data and manipulating objects, such as counters.&lt;/li&gt; &lt;li&gt;Performing operations such as gracefully shutting down Data Grid clusters or transferring cache state to backup locations when using cross-site replication.&lt;/li&gt; &lt;li&gt;Monitoring cluster and server health and retrieving statistics.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Data Grid 8.0 REST API also automatically converts between storage formats such as JSON, XML, Protobuf, and plain text for increased interoperability. The Red Hat Data Grid engineering team develops and maintains comprehensive &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_data_grid/8.0/html-single/data_grid_rest_api/" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;REST API Documentation&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Powerful CLI&lt;/h2&gt; &lt;p&gt;In version 8.0, Data Grid provides a new CLI with intuitive commands for remotely accessing data and managing clusters. This CLI uses familiar Bash commands for navigating, like &lt;code&gt;cd&lt;/code&gt; and &lt;code&gt;ls&lt;/code&gt;. It also provides command history and auto-completion for ease of use. Additionally, the CLI provides help text and man pages for commands with clear examples.&lt;/p&gt; &lt;p&gt;Try the docs: &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_data_grid/8.0/html-single/data_grid_command_line_interface/#getting_started" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;Getting Started with the Data Grid CLI&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Enhanced observability&lt;/h2&gt; &lt;p&gt;Red Hat Data Grid is now compatible with the MicroProfile Metrics API and provides a &lt;code&gt;/metrics&lt;/code&gt; endpoint for integration with Prometheus. For more details, and to learn about Data Grid metrics and histograms, &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_data_grid/8.0" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;check the documentation here&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Along with metrics, Data Grid 8.0 offers improved statistics and management operations via JMX, as well as updated logging categories and support for JSON formatted logs.&lt;/p&gt; &lt;h2&gt;Get started&lt;/h2&gt; &lt;p&gt;Ready to dive in and try out Data Grid 8.0? Here are more useful links to get you started:&lt;/p&gt; &lt;ul&gt; &lt;li style="list-style-type: none;"&gt; &lt;ul&gt; &lt;li&gt;Zip distributions are &lt;a href="https://access.redhat.com/jbossnetwork/restricted/listSoftware.html?product=data.grid&amp;#38;downloadType=distributions" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;available through the Certified Service Provider (CSP) program&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;Container distributions and Operators are &lt;a href="https://access.redhat.com/containers/#/product/JbossDataGrid" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;available in the Red Hat Container Catalog (RHCC)&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;Product documentation is &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_data_grid/8.0/" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;available on the Red Hat customer portal&lt;/a&gt;, including &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_data_grid/8.0/html/data_grid_migration_guide/" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;a migration guide&lt;/a&gt; to help you migrate your existing Data Grid deployments to 8.0.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;To find out more about Red Hat Data Grid, visit &lt;a href="https://www.redhat.com/en/technologies/jboss-middleware/data-grid" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;the product page.&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F13%2Fred-hat-data-grid-8-0-brings-new-server-architecture-improved-rest-api-and-more%2F&amp;#38;linkname=Red%20Hat%20Data%20Grid%208.0%20brings%20new%20server%20architecture%2C%20improved%20REST%20API%2C%20and%20more" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F13%2Fred-hat-data-grid-8-0-brings-new-server-architecture-improved-rest-api-and-more%2F&amp;#38;linkname=Red%20Hat%20Data%20Grid%208.0%20brings%20new%20server%20architecture%2C%20improved%20REST%20API%2C%20and%20more" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F13%2Fred-hat-data-grid-8-0-brings-new-server-architecture-improved-rest-api-and-more%2F&amp;#38;linkname=Red%20Hat%20Data%20Grid%208.0%20brings%20new%20server%20architecture%2C%20improved%20REST%20API%2C%20and%20more" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F13%2Fred-hat-data-grid-8-0-brings-new-server-architecture-improved-rest-api-and-more%2F&amp;#38;linkname=Red%20Hat%20Data%20Grid%208.0%20brings%20new%20server%20architecture%2C%20improved%20REST%20API%2C%20and%20more" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F13%2Fred-hat-data-grid-8-0-brings-new-server-architecture-improved-rest-api-and-more%2F&amp;#38;linkname=Red%20Hat%20Data%20Grid%208.0%20brings%20new%20server%20architecture%2C%20improved%20REST%20API%2C%20and%20more" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F13%2Fred-hat-data-grid-8-0-brings-new-server-architecture-improved-rest-api-and-more%2F&amp;#38;linkname=Red%20Hat%20Data%20Grid%208.0%20brings%20new%20server%20architecture%2C%20improved%20REST%20API%2C%20and%20more" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F13%2Fred-hat-data-grid-8-0-brings-new-server-architecture-improved-rest-api-and-more%2F&amp;#38;linkname=Red%20Hat%20Data%20Grid%208.0%20brings%20new%20server%20architecture%2C%20improved%20REST%20API%2C%20and%20more" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F13%2Fred-hat-data-grid-8-0-brings-new-server-architecture-improved-rest-api-and-more%2F&amp;#038;title=Red%20Hat%20Data%20Grid%208.0%20brings%20new%20server%20architecture%2C%20improved%20REST%20API%2C%20and%20more" data-a2a-url="https://developers.redhat.com/blog/2020/04/13/red-hat-data-grid-8-0-brings-new-server-architecture-improved-rest-api-and-more/" data-a2a-title="Red Hat Data Grid 8.0 brings new server architecture, improved REST API, and more"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/04/13/red-hat-data-grid-8-0-brings-new-server-architecture-improved-rest-api-and-more/"&gt;Red Hat Data Grid 8.0 brings new server architecture, improved REST API, and more&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/-0FJRbUaStg" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Red Hat Data Grid helps applications access, process, and analyze data at in-memory speed. Red Hat Data Grid 8.0 is included in the latest update to open hybrid cloud. Operational intelligence Operator Red Hat Data Grid 8.0 introduces a fully supported Operator that provides operational intelligence, using Kubernetes APIs to handle operations and manage application [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/04/13/red-hat-data-grid-8-0-brings-new-server-architecture-improved-rest-api-and-more/"&gt;Red Hat Data Grid 8.0 brings new server architecture, improved REST API, and more&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><post-id xmlns="com-wordpress:feed-additions:1">703457</post-id><dc:creator>Syed M Shaaf</dc:creator><dc:date>2020-04-13T07:00:26Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/04/13/red-hat-data-grid-8-0-brings-new-server-architecture-improved-rest-api-and-more/</feedburner:origLink></entry><entry><title>JBoss EAP 7.3 brings new packaging capabilities</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/CM9wtkBkf5E/" /><category term="DevOps" /><category term="Java" /><category term="Modern App Dev" /><category term="Red Hat OpenShift Application Runtimes" /><category term="containers" /><category term="galleon" /><category term="JBoss EAP 7.3" /><category term="openshift" /><category term="runtimes" /><author><name>James Falkner</name></author><id>https://developers.redhat.com/blog/?p=700837</id><updated>2020-04-10T07:00:52Z</updated><published>2020-04-10T07:00:52Z</published><content type="html">&lt;p&gt;In addition to a huge set of &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.3/html-single/7.3.0_release_notes/index#new_features_and_enhancements" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;new features and improvements&lt;/a&gt;, the &lt;a href="https://www.redhat.com/en/blog/announcing-availability-red-hat-jboss-enterprise-application-platform-73" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;release of Red Hat JBoss Enterprise Application Platform 7.3&lt;/a&gt; provides innovative packaging capabilities. In this article, I will highlight two of these new capabilities and demonstrate their benefits: splitting images into build versus runtimes, and configuration trimming with &lt;a href="https://docs.wildfly.org/galleon/" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;Galleon&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Separating build versus runtime images&lt;/h2&gt; &lt;p&gt;The traditional containerization of JBoss EAP images consists of running an &lt;a href="https://docs.openshift.com/container-platform/latest/builds/understanding-image-builds.html#build-strategy-s2i_understanding-image-builds" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;S2I build&lt;/a&gt;, which combines a base JBoss EAP image (containing everything in EAP) with the application build. This old way of doing things results in a final image that has a &lt;em&gt;lot&lt;/em&gt; of unnecessary stuff in it, such as build tools like Maven and S2I tooling.&lt;/p&gt; &lt;p&gt;In JBoss EAP 7.3, there are new, slimmed-down runtime images that can be built in a pipeline as a chained build so that the final image is much smaller and doesn&amp;#8217;t contain all of the tooling needed at build time. This behavior offers a smaller image size and saves costs for network bandwidth and storage.&lt;/p&gt; &lt;h2&gt;Trimming with Galleon&lt;/h2&gt; &lt;p&gt;You can now customize the main JBoss EAP for OpenShift image configuration to include &lt;em&gt;only&lt;/em&gt; the capabilities that you require, thereby reducing the memory footprint and startup times. The provisioning tool, &lt;a href="https://docs.wildfly.org/galleon/" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;Galleon&lt;/a&gt;, offers several layers that you can select to control the capabilities present in the JBoss EAP server. This server contains several &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.3/html/getting_started_with_jboss_eap_for_openshift_container_platform/capability-trimming-eap-foropenshift_default" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;supported and pre-defined Galleon layers&lt;/a&gt;, and developers and operations teams can create custom layers they can use to add small parts of functionality in a repeatable way.&lt;/p&gt; &lt;p&gt;These two features provide many benefits, which are outlined in the demo video. Check it out, and be sure to try JBoss EAP 7.3 and discover many other awesome new features and improvements!&lt;/p&gt; &lt;p&gt;&lt;iframe src="https://www.youtube.com/embed/UvLh5G8prT0" width="560" height="315" frameborder="0" allowfullscreen="allowfullscreen"&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F10%2Fjboss-eap-7-3-brings-new-packaging-capabilities%2F&amp;#38;linkname=JBoss%20EAP%207.3%20brings%20new%20packaging%20capabilities" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F10%2Fjboss-eap-7-3-brings-new-packaging-capabilities%2F&amp;#38;linkname=JBoss%20EAP%207.3%20brings%20new%20packaging%20capabilities" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F10%2Fjboss-eap-7-3-brings-new-packaging-capabilities%2F&amp;#38;linkname=JBoss%20EAP%207.3%20brings%20new%20packaging%20capabilities" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F10%2Fjboss-eap-7-3-brings-new-packaging-capabilities%2F&amp;#38;linkname=JBoss%20EAP%207.3%20brings%20new%20packaging%20capabilities" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F10%2Fjboss-eap-7-3-brings-new-packaging-capabilities%2F&amp;#38;linkname=JBoss%20EAP%207.3%20brings%20new%20packaging%20capabilities" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F10%2Fjboss-eap-7-3-brings-new-packaging-capabilities%2F&amp;#38;linkname=JBoss%20EAP%207.3%20brings%20new%20packaging%20capabilities" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F10%2Fjboss-eap-7-3-brings-new-packaging-capabilities%2F&amp;#38;linkname=JBoss%20EAP%207.3%20brings%20new%20packaging%20capabilities" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F10%2Fjboss-eap-7-3-brings-new-packaging-capabilities%2F&amp;#038;title=JBoss%20EAP%207.3%20brings%20new%20packaging%20capabilities" data-a2a-url="https://developers.redhat.com/blog/2020/04/10/jboss-eap-7-3-brings-new-packaging-capabilities/" data-a2a-title="JBoss EAP 7.3 brings new packaging capabilities"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/04/10/jboss-eap-7-3-brings-new-packaging-capabilities/"&gt;JBoss EAP 7.3 brings new packaging capabilities&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/CM9wtkBkf5E" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;In addition to a huge set of release of Red Hat JBoss Enterprise Application Platform 7.3 provides innovative packaging capabilities. In this article, I will highlight two of these new capabilities and demonstrate their benefits: splitting images into build versus runtimes, and configuration trimming with S2I build, which combines a base JBoss EAP image (containing [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/04/10/jboss-eap-7-3-brings-new-packaging-capabilities/"&gt;JBoss EAP 7.3 brings new packaging capabilities&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><post-id xmlns="com-wordpress:feed-additions:1">700837</post-id><dc:creator>James Falkner</dc:creator><dc:date>2020-04-10T07:00:52Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/04/10/jboss-eap-7-3-brings-new-packaging-capabilities/</feedburner:origLink></entry><entry><title>Migrating a Spring Boot microservices application to Quarkus</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/howNm7-UqSg/" /><category term="Java" /><category term="Kubernetes" /><category term="Modern App Dev" /><category term="Quarkus" /><category term="containers" /><category term="GraalVM" /><category term="kubernetes-native" /><category term="microservices" /><category term="Spring Boot" /><author><name>chgan</name></author><id>https://developers.redhat.com/blog/?p=694017</id><updated>2020-04-10T07:00:50Z</updated><published>2020-04-10T07:00:50Z</published><content type="html">&lt;p&gt;While &lt;a href="https://developers.redhat.com/topics/spring-boot/" rel="noopener noreferrer"&gt;Spring Boot&lt;/a&gt; has long been the de-facto framework for developing container-based applications in Java, the performance benefits of a Kubernetes-native framework are hard to ignore. In this article, I will show you how to quickly migrate a Spring Boot microservices application to &lt;a href="https://developers.redhat.com/topics/quarkus/" rel="noopener noreferrer"&gt;Quarkus&lt;/a&gt;. Once the migration is complete, we&amp;#8217;ll test the application and compare startup times between the original Spring Boot application and the new Quarkus app.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;span id="more-694017"&gt;&lt;/span&gt;&lt;br /&gt; &lt;strong&gt;Note&lt;/strong&gt;: For developers interested in migrating from Spring Boot to Quarkus, it&amp;#8217;s important to know that Quarkus does not support all of Spring Boot&amp;#8217;s extensions and features. As one example, it only supports a subset of the Java EE &lt;a href="https://quarkus.io/guides/cdi-reference" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;Contexts and Dependency Injection (CDI) API&lt;/a&gt;. Migrating microservices or container-based applications to Quarkus will be easier than migrating monolithic ones.&lt;/p&gt; &lt;h2&gt;About Quarkus&lt;/h2&gt; &lt;p&gt;Quarkus is a &lt;a href="https://developers.redhat.com/blog/2019/03/07/quarkus-next-generation-kubernetes-native-java-framework/" rel="noopener noreferrer"&gt;Kubernetes-native Java framework&lt;/a&gt; tailored for Java virtual machines (JVMs) such as GraalVM and HotSpot. Being &lt;em&gt;Kubernetes-native&lt;/em&gt; means that Quarkus takes a &lt;a href="https://quarkus.io/vision/container-first" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;container-first approach&lt;/a&gt; to Java application development. The smaller footprint inherent in container-first development makes Quarkus one of the best options for running Java applications on Kubernetes and serverless platforms today.&lt;/p&gt; &lt;h2&gt;The Spring Boot application&lt;/h2&gt; &lt;p&gt;For our example application, we&amp;#8217;ll use the &lt;code&gt;AccountBalance&lt;/code&gt; microservices application from my previous article, &lt;em&gt;&lt;a href="https://developers.redhat.com/blog/2019/11/21/event-based-microservices-with-red-hat-amq-streams/" rel="noopener noreferrer"&gt;Event-based microservices with Red Hat AMQ Streams&lt;/a&gt;&lt;/em&gt;. The &lt;code&gt;AccountBalance&lt;/code&gt; service has its own MongoDB database, which holds account-balance information. The database is also called by other services, such as the &lt;code&gt;EventCorrelator&lt;/code&gt; service.&lt;/p&gt; &lt;p&gt;You can find the source code for the example application on &lt;a href="https://github.com/chengkuangan/AccountBalance-Quarkus-Sample" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;GitHub&lt;/a&gt;. I&amp;#8217;ll guide you through each step of migrating this application from Spring Boot to Quarkus.&lt;/p&gt; &lt;p&gt;The following shows the content of the sample source code. This is typical standard Java project file structure. mvnw is Maven wrapper plugin that we &lt;a href="https://www.baeldung.com/maven-wrapper" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;generated&lt;/a&gt;. We will need to modify the pom.xml and the source codes under the src/main.&lt;/p&gt; &lt;div id="attachment_705127" style="width: 244px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-705127" class=" wp-image-705127 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2020/04/Quarkus-Codes-Structure.png" src="https://developers.redhat.com/blog/wp-content/uploads/2020/04/Quarkus-Codes-Structure.png" alt="Sample Codes Content" width="234" height="353" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/04/Quarkus-Codes-Structure.png 398w, https://developers.redhat.com/blog/wp-content/uploads/2020/04/Quarkus-Codes-Structure-199x300.png 199w" sizes="(max-width: 234px) 100vw, 234px" /&gt;&lt;p id="caption-attachment-705127" class="wp-caption-text"&gt;Sample Codes Content&lt;/p&gt;&lt;/div&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;h3&gt;Step 1: Modify the pom.xml for your application&lt;/h3&gt; &lt;p&gt;The simplest way to migrate from Spring Boot to Quarkus is to &lt;a href="https://quarkus.io/guides/getting-started#bootstrapping-the-project" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;bootstrap a sample Quarkus application&lt;/a&gt; and use that application&amp;#8217;s &lt;code&gt;pom.xml&lt;/code&gt; as a template for modifying the same file in your Spring Boot application.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Note&lt;/strong&gt;: In addition to the example &lt;code&gt;pom.xml&lt;/code&gt;, the Quarkus team provides a &lt;a href="https://code.quarkus.io/" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;web-based user interface (UI)&lt;/a&gt; that you can use for migration. I won&amp;#8217;t demonstrate using the web UI in this article.&lt;/p&gt; &lt;p&gt;Take a minute to set up your terminal and project, as described in the &lt;a href="https://quarkus.io/guides/getting-started#bootstrapping-the-project" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;bootstrapping instructions&lt;/a&gt;. Once you have your project set up, we can begin modifying the Spring Boot &lt;code&gt;pom.xml&lt;/code&gt;. We&amp;#8217;ll start by removing Spring Boot configurations we no longer need, then we&amp;#8217;ll replace those elements with the corresponding &lt;a href="https://quarkus.io/guides/config" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;configurations for a Quarkus app&lt;/a&gt;.&lt;/p&gt; &lt;h4&gt;Remove the Spring Boot configurations&lt;/h4&gt; &lt;p&gt;First, we remove the packing configuration from the example application&amp;#8217;s &lt;code&gt;pom.xml&lt;/code&gt;. This no longer needed because it is taken care by the &lt;code&gt;&amp;#60;build&amp;#62;&lt;/code&gt; part in the &lt;code&gt;pom.xml&lt;/code&gt; configuration.&lt;/p&gt; &lt;pre&gt;&amp;#60;!--- Remove the packing configuration --&amp;#62; &amp;#60;packaging&amp;#62;jar&amp;#60;/packaging&amp;#62; &lt;/pre&gt; &lt;p&gt;&lt;code&gt;spring-boot-starter-parent&lt;/code&gt; is for Spring Boot application which is no longer needed here.&lt;/p&gt; &lt;pre&gt;&amp;#60;!--- Remove spring-boot-starter-parent --&amp;#62; &amp;#60;parent&amp;#62; &amp;#60;groupId&amp;#62;org.springframework.boot&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;spring-boot-starter-parent&amp;#60;/artifactId&amp;#62; &amp;#60;version&amp;#62;1.4.2.RELEASE&amp;#60;/version&amp;#62; &amp;#60;/parent&amp;#62; &lt;/pre&gt; &lt;p&gt;same goes to &lt;code&gt;spring-cloud-dependencies&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&amp;#60;!-- Remove the following from the &amp;#60;dependencyManagement&amp;#62; --&amp;#62; &amp;#60;groupId&amp;#62;org.springframework.cloud&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;spring-cloud-dependencies&amp;#60;/artifactId&amp;#62; &amp;#60;version&amp;#62;Brixton.SR4&amp;#60;/version&amp;#62; &lt;/pre&gt; &lt;p&gt;Now, we can remove all of the remaining Spring Boot dependencies:&lt;/p&gt; &lt;pre&gt;&amp;#60;!-- Remove all Spring Boot-related dependencies --&amp;#62; &amp;#60;dependency&amp;#62; &amp;#60;groupId&amp;#62;org.springframework.boot&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;spring-boot-starter-data-mongodb&amp;#60;/artifactId&amp;#62; &amp;#60;/dependency&amp;#62; &amp;#60;dependency&amp;#62; &amp;#60;groupId&amp;#62;org.springframework.boot&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;spring-boot-starter-web&amp;#60;/artifactId&amp;#62; &amp;#60;/dependency&amp;#62; &amp;#60;dependency&amp;#62; &amp;#60;groupId&amp;#62;org.springframework.data&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;spring-data-commons&amp;#60;/artifactId&amp;#62; &amp;#60;/dependency&amp;#62; &amp;#60;dependency&amp;#62; &amp;#60;groupId&amp;#62;org.springframework.boot&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;spring-boot-starter-websocket&amp;#60;/artifactId&amp;#62; &amp;#60;/dependency&amp;#62; &amp;#60;dependency&amp;#62; &amp;#60;groupId&amp;#62;org.springframework&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;spring-messaging&amp;#60;/artifactId&amp;#62; &amp;#60;/dependency&amp;#62; &amp;#60;dependency&amp;#62; &amp;#60;groupId&amp;#62;org.springframework.cloud&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;spring-cloud-context&amp;#60;/artifactId&amp;#62; &amp;#60;/dependency&amp;#62; &amp;#60;dependency&amp;#62; &amp;#60;groupId&amp;#62;javax.ws.rs&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;javax.ws.rs-api&amp;#60;/artifactId&amp;#62; &amp;#60;version&amp;#62;2.0.1&amp;#60;/version&amp;#62; &amp;#60;/dependency&amp;#62; &amp;#60;dependency&amp;#62; &amp;#60;groupId&amp;#62;org.apache.maven&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;maven-model&amp;#60;/artifactId&amp;#62; &amp;#60;version&amp;#62;3.3.9&amp;#60;/version&amp;#62; &amp;#60;/dependency&amp;#62; &amp;#60;dependency&amp;#62; &amp;#60;groupId&amp;#62;javax.xml.bind&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;jaxb-api&amp;#60;/artifactId&amp;#62; &amp;#60;version&amp;#62;2.2.11&amp;#60;/version&amp;#62; &amp;#60;/dependency&amp;#62; &amp;#60;dependency&amp;#62; &amp;#60;groupId&amp;#62;com.sun.xml.bind&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;jaxb-core&amp;#60;/artifactId&amp;#62; &amp;#60;version&amp;#62;2.2.11&amp;#60;/version&amp;#62; &amp;#60;/dependency&amp;#62; &amp;#60;dependency&amp;#62; &amp;#60;groupId&amp;#62;com.sun.xml.bind&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;jaxb-impl&amp;#60;/artifactId&amp;#62; &amp;#60;version&amp;#62;2.2.11&amp;#60;/version&amp;#62; &amp;#60;/dependency&amp;#62; &amp;#60;dependency&amp;#62; &amp;#60;groupId&amp;#62;javax.activation&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;activation&amp;#60;/artifactId&amp;#62; &amp;#60;version&amp;#62;1.1.1&amp;#60;/version&amp;#62; &amp;#60;/dependency&amp;#62; &lt;/pre&gt; &lt;p&gt;We can also take out the &lt;code&gt;spring-boot-maven-plugin&lt;/code&gt; in the build section:&lt;/p&gt; &lt;pre&gt;&amp;#60;!-- Remove the spring-boot-maven plugin from the build section --&amp;#62; &amp;#60;plugin&amp;#62; &amp;#60;groupId&amp;#62;org.springframework.boot&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;spring-boot-maven-plugin&amp;#60;/artifactId&amp;#62; &amp;#60;/plugin&amp;#62; &lt;/pre&gt; &lt;h4&gt;Add Quarkus elements to the pom.xml&lt;/h4&gt; &lt;p&gt;Next, we&amp;#8217;ll copy the properties and dependencies from the bootstrapped Quarkus &lt;code&gt;pom.xml&lt;/code&gt; and paste them in at the top of the &lt;code&gt;pom.xml&lt;/code&gt; for our example application. This section is important to tell the compiler which version of components that we want to use for our Quarkus. Quarkus release is moving fast, you may want to check the latest version for &lt;code&gt;&amp;#60;quarkus.platform.version&amp;#62; &lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&amp;#60;!-- Place this at the top of the pom.xml --&amp;#62; &amp;#60;properties&amp;#62; &amp;#60;compiler-plugin.version&amp;#62;3.8.1&amp;#60;/compiler-plugin.version&amp;#62; &amp;#60;maven.compiler.parameters&amp;#62;true&amp;#60;/maven.compiler.parameters&amp;#62; &amp;#60;maven.compiler.source&amp;#62;1.8&amp;#60;/maven.compiler.source&amp;#62; &amp;#60;maven.compiler.target&amp;#62;1.8&amp;#60;/maven.compiler.target&amp;#62; &amp;#60;project.build.sourceEncoding&amp;#62;UTF-8&amp;#60;/project.build.sourceEncoding&amp;#62; &amp;#60;project.reporting.outputEncoding&amp;#62;UTF-8&amp;#60;/project.reporting.outputEncoding&amp;#62; &amp;#60;quarkus-plugin.version&amp;#62;1.2.1.Final&amp;#60;/quarkus-plugin.version&amp;#62; &amp;#60;quarkus.platform.artifact-id&amp;#62;quarkus-universe-bom&amp;#60;/quarkus.platform.artifact-id&amp;#62; &amp;#60;quarkus.platform.group-id&amp;#62;io.quarkus&amp;#60;/quarkus.platform.group-id&amp;#62; &amp;#60;quarkus.platform.version&amp;#62;1.2.1.Final&amp;#60;/quarkus.platform.version&amp;#62; &amp;#60;surefire-plugin.version&amp;#62;2.22.1&amp;#60;/surefire-plugin.version&amp;#62; &amp;#60;/properties&amp;#62; &lt;/pre&gt; &lt;p&gt;Add this under &lt;code&gt;dependencyManagement&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&amp;#60;!-- Add this under dependencyManagement --&amp;#62; &amp;#60;dependencyManagement&amp;#62; &amp;#60;dependencies&amp;#62; &amp;#60;dependency&amp;#62; &amp;#60;groupId&amp;#62;${quarkus.platform.group-id}&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;${quarkus.platform.artifact-id}&amp;#60;/artifactId&amp;#62; &amp;#60;version&amp;#62;${quarkus.platform.version}&amp;#60;/version&amp;#62; &amp;#60;type&amp;#62;pom&amp;#60;/type&amp;#62; &amp;#60;scope&amp;#62;import&amp;#60;/scope&amp;#62; &amp;#60;/dependency&amp;#62; &amp;#60;/dependencies&amp;#62; &amp;#60;/dependencyManagement&amp;#62; &lt;/pre&gt; &lt;p&gt;Now we can copy the Quarkus dependencies from the bootstrap file and paste them into the &lt;code&gt;pom.xml&lt;/code&gt;. Note that in the code below, I also manually added the &lt;a href="https://quarkus.io/guides/mongodb-panache" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;MongoDB Panache&lt;/a&gt; dependency, which the example application requires. I added this dependency manually because I did not use the web UI to bootstrap it in earlier. Note, also, that &lt;code&gt;AccountBalance&lt;/code&gt; uses a repository to connect to and query the MongoDB database. The Panache extension allows us to migrate the existing code with minimal changes. (You can find the &lt;a href="https://github.com/quarkusio/quarkus/blob/master/extensions/panache/mongodb-panache/runtime/src/main/java/io/quarkus/mongodb/panache/PanacheMongoRepositoryBase.java" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;source code for Panache&lt;/a&gt; on GitHub.)&lt;/p&gt; &lt;p&gt;Start by adding these dependencies to the &lt;code&gt;pom.xml:&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&amp;#60;dependency&amp;#62; &amp;#60;groupId&amp;#62;io.quarkus&amp;#60;/groupId&amp;#62; &amp;#60;!-- notice this app is using jsonb --&amp;#62; &amp;#60;artifactId&amp;#62;quarkus-resteasy-jsonb&amp;#60;/artifactId&amp;#62; &amp;#60;/dependency&amp;#62; &amp;#60;dependency&amp;#62; &amp;#60;groupId&amp;#62;io.quarkus&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;quarkus-junit5&amp;#60;/artifactId&amp;#62; &amp;#60;scope&amp;#62;test&amp;#60;/scope&amp;#62; &amp;#60;/dependency&amp;#62; &amp;#60;dependency&amp;#62; &amp;#60;groupId&amp;#62;io.rest-assured&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;rest-assured&amp;#60;/artifactId&amp;#62; &amp;#60;scope&amp;#62;test&amp;#60;/scope&amp;#62; &amp;#60;/dependency&amp;#62; &amp;#60;dependency&amp;#62; &amp;#60;groupId&amp;#62;io.quarkus&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;quarkus-mongodb-panache&amp;#60;/artifactId&amp;#62; &amp;#60;/dependency&amp;#62; &lt;/pre&gt; &lt;p&gt;Add the &lt;code&gt;quarkus-maven-plugin&lt;/code&gt; under the build configuration:&lt;/p&gt; &lt;pre&gt;&amp;#60;!-- Add the following plugin under the build configuration --&amp;#62; &amp;#60;build&amp;#62; &amp;#60;finalName&amp;#62;${project.artifactId}-${project.version}&amp;#60;/finalName&amp;#62; &amp;#60;plugins&amp;#62; &amp;#60;plugin&amp;#62; &amp;#60;groupId&amp;#62;io.quarkus&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;quarkus-maven-plugin&amp;#60;/artifactId&amp;#62; &amp;#60;version&amp;#62;${quarkus-plugin.version}&amp;#60;/version&amp;#62; &amp;#60;executions&amp;#62; &amp;#60;execution&amp;#62; &amp;#60;goals&amp;#62; &amp;#60;goal&amp;#62;build&amp;#60;/goal&amp;#62; &amp;#60;/goals&amp;#62; &amp;#60;/execution&amp;#62; &amp;#60;/executions&amp;#62; &amp;#60;/plugin&amp;#62; &amp;#60;plugin&amp;#62; &amp;#60;artifactId&amp;#62;maven-compiler-plugin&amp;#60;/artifactId&amp;#62; &amp;#60;version&amp;#62;${compiler-plugin.version}&amp;#60;/version&amp;#62; &amp;#60;/plugin&amp;#62; &amp;#60;plugin&amp;#62; &amp;#60;artifactId&amp;#62;maven-surefire-plugin&amp;#60;/artifactId&amp;#62; &amp;#60;version&amp;#62;${surefire-plugin.version}&amp;#60;/version&amp;#62; &amp;#60;configuration&amp;#62; &amp;#60;systemProperties&amp;#62; &amp;#60;java.util.logging.manager&amp;#62;org.jboss.logmanager.LogManager&amp;#60;/java.util.logging.manager&amp;#62; &amp;#60;/systemProperties&amp;#62; &amp;#60;/configuration&amp;#62; &amp;#60;/plugin&amp;#62; &amp;#60;/plugins&amp;#62; &amp;#60;/build&amp;#62; &lt;/pre&gt; &lt;p&gt;Finally, add the profiles settings:&lt;/p&gt; &lt;pre&gt;&amp;#60;!-- Add the following profiles settings --&amp;#62; &amp;#60;profiles&amp;#62; &amp;#60;profile&amp;#62; &amp;#60;id&amp;#62;native&amp;#60;/id&amp;#62; &amp;#60;activation&amp;#62; &amp;#60;property&amp;#62; &amp;#60;name&amp;#62;native&amp;#60;/name&amp;#62; &amp;#60;/property&amp;#62; &amp;#60;/activation&amp;#62; &amp;#60;build&amp;#62; &amp;#60;plugins&amp;#62; &amp;#60;plugin&amp;#62; &amp;#60;artifactId&amp;#62;maven-failsafe-plugin&amp;#60;/artifactId&amp;#62; &amp;#60;version&amp;#62;${surefire-plugin.version}&amp;#60;/version&amp;#62; &amp;#60;executions&amp;#62; &amp;#60;execution&amp;#62; &amp;#60;goals&amp;#62; &amp;#60;goal&amp;#62;integration-test&amp;#60;/goal&amp;#62; &amp;#60;goal&amp;#62;verify&amp;#60;/goal&amp;#62; &amp;#60;/goals&amp;#62; &amp;#60;configuration&amp;#62; &amp;#60;systemProperties&amp;#62; &amp;#60;native.image.path&amp;#62;${project.build.directory}/${project.build.finalName}-runner&amp;#60;/native.image.path&amp;#62; &amp;#60;/systemProperties&amp;#62; &amp;#60;/configuration&amp;#62; &amp;#60;/execution&amp;#62; &amp;#60;/executions&amp;#62; &amp;#60;/plugin&amp;#62; &amp;#60;/plugins&amp;#62; &amp;#60;/build&amp;#62; &amp;#60;properties&amp;#62; &amp;#60;quarkus.package.type&amp;#62;native&amp;#60;/quarkus.package.type&amp;#62; &amp;#60;/properties&amp;#62; &amp;#60;/profile&amp;#62; &amp;#60;/profiles&amp;#62; &lt;/pre&gt; &lt;h3&gt;Step 2: Migrate the Spring Boot application code&lt;/h3&gt; &lt;p&gt;The Maven POM is all set. We&amp;#8217;re now ready to migrate the Spring Boot application code to Quarkus.&lt;/p&gt; &lt;p&gt;First, remove the &lt;code&gt;Application.java&lt;/code&gt; class. We don&amp;#8217;t need it anymore. You can also modify the &lt;code&gt;application.properties&lt;/code&gt; for the application port and the &lt;a href="https://quarkus.io/guides/mongodb#configuration-reference" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;MongoDB client properties&lt;/a&gt; files, as shown here:&lt;/p&gt; &lt;pre&gt;### --- Remove the Spring Boot properties # spring.application.name=accountbalance-service # spring.data.mongodb.host=localhost # spring.data.mongodb.port=27017 # spring.data.mongodb.username=checkbalance # spring.data.mongodb.password=checkbalance # spring.data.mongodb.database=checkbalance # server.port=8082 ### --- Replace with equivalent Quarkus MongoDB properties quarkus.mongodb.connection-string=mongodb://checkbalance:checkbalance@localhost:27017/checkbalance # --- Note the wrong context of database name ... planning and design before coding is so important. quarkus.mongodb.database=checkbalance quarkus.http.port=8082 &lt;/pre&gt; &lt;h4&gt;The entity bean code&lt;/h4&gt; &lt;p&gt;Next, we&amp;#8217;ll change the entity bean code in &lt;code&gt;Balance.java&lt;/code&gt;. To start, remove the Spring Boot-related import statements. We are going to replace these with Quarkus equivalent components in the next section.&lt;/p&gt; &lt;pre&gt;/// --- Remove the Spring Boot-related import statements import org.bson.types.ObjectId; import org.springframework.data.annotation.Id; import org.springframework.data.mongodb.core.mapping.Document; &lt;/pre&gt; &lt;p&gt;Add the equivalent import statements for Quarkus. Quarkus framework provides its own supported components for MongoDB via the MongoDB Panache extension. Quarkus also provides its own version of CDI annotation. This where we provide the correct import statements for those.&lt;/p&gt; &lt;pre&gt;/// --- Add the following Quarkus-related import statements import io.quarkus.mongodb.panache.MongoEntity; import io.quarkus.mongodb.panache.PanacheMongoEntity; import org.bson.codecs.pojo.annotations.BsonProperty; import org.bson.codecs.pojo.annotations.BsonId; import io.quarkus.mongodb.panache.PanacheQuery; &lt;/pre&gt; &lt;p&gt;Replace the existing &lt;code&gt;@Document&lt;/code&gt; annotation with &lt;code&gt;@MongoEntity&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;/// --- Replace @Document annotation with @MongoEntity // --- @Document(collection = "balance") &amp;#60;--- Remove this @MongoEntity(collection="balance") public class Balance extends PanacheMongoEntity{ /// --- More codes here are omitted ... ...&lt;/pre&gt; &lt;p&gt;Replace Spring Boot&amp;#8217;s &lt;code&gt;@Id&lt;/code&gt; annotation with Quarkus&amp;#8217;s &lt;code&gt;@BsonId&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;/// --- Replace @Id annotation with @BsonId // @Id &amp;#60;--- Remove this @BsonId //In fact, we do not need this. Just leave it here for now. private String _id; &lt;/pre&gt; &lt;h3&gt;The repository class&lt;/h3&gt; &lt;p&gt;We also need to modify the Spring Boot repository class, &lt;code&gt;BalanceRepository.java&lt;/code&gt;. To start, remove the following import statement:&lt;/p&gt; &lt;pre&gt;/// --- Remove the following import statement import org.springframework.data.mongodb.repository.MongoRepository; &lt;/pre&gt; &lt;p&gt;Replace it with this one:&lt;/p&gt; &lt;pre&gt;/// --- Add the following import statements import io.quarkus.mongodb.panache.PanacheMongoRepository; import javax.enterprise.context.ApplicationScoped; import io.quarkus.mongodb.panache.PanacheQuery; &lt;/pre&gt; &lt;p&gt;Then make three more quick changes:&lt;/p&gt; &lt;pre&gt;/// --- Change the BalanceRepository to implement PanacheMongoRepository // --- Change the BalanceRepository from interface to class // --- Drop in the @ApplicationScoped annotation @ApplicationScoped public class BalanceRepository implements PanacheMongoRepository&amp;#60;Balance&amp;#62; { // --- Change the findByAccountId(String accountId) to the following implementation public Balance findByAccountId(String accountId){ return find("accountId", accountId).firstResult(); } } &lt;/pre&gt; &lt;h4&gt;The REST class&lt;/h4&gt; &lt;p&gt;We&amp;#8217;ll also modify &lt;code&gt;AccountBalance.java&lt;/code&gt;. Start by removing all of the Spring Boot-related import statements:&lt;/p&gt; &lt;pre&gt;/// --- Remove all the Spring Boot-related import statements import org.springframework.web.bind.annotation.PathVariable; import org.springframework.web.bind.annotation.RequestBody; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import org.springframework.web.bind.annotation.ResponseBody; import org.springframework.web.bind.annotation.RestController; import org.springframework.core.env.Environment; import org.springframework.data.domain.Example; import org.springframework.data.repository.Repository; import org.springframework.http.HttpStatus; import org.springframework.http.ResponseEntity; import org.springframework.beans.factory.annotation.Autowired; &lt;/pre&gt; &lt;p&gt;Add the following import statements for Quarkus. (We&amp;#8217;re not using all of these imports in the &lt;code&gt;.java&lt;/code&gt; files, but we can leave them for now.)&lt;/p&gt; &lt;pre&gt;/// --- Add the following import statements. import javax.ws.rs.Consumes; import javax.ws.rs.DELETE; import javax.ws.rs.GET; import javax.ws.rs.POST; import javax.ws.rs.PUT; import javax.ws.rs.Path; import javax.ws.rs.PathParam; import javax.ws.rs.Produces; import javax.ws.rs.core.Response; import javax.ws.rs.core.MediaType; import javax.inject.Inject; &lt;/pre&gt; &lt;p&gt;Remove the Spring Boot &lt;code&gt;@RequestMapping&lt;/code&gt; and &lt;code&gt;@RestController&lt;/code&gt; annotations:&lt;/p&gt; &lt;pre&gt;/// --- Remove the @RequestMapping and @RestController and update as follows // @RequestMapping("/ws/pg")      &amp;#60;--- Remove this // @RestController      &amp;#60;--- Remove this @Path("/ws/pg") // &amp;#60;---- Add this @Produces(MediaType.APPLICATION_JSON) // &amp;#60;---- Add this @Consumes(MediaType.APPLICATION_JSON) // &amp;#60;---- Add this public class AccountBalance{ /// --- I have omitted more code here ... &lt;/pre&gt; &lt;p&gt;You will also need to remove the &lt;code&gt;@Autowire&lt;/code&gt; and &lt;code&gt;@Inject&lt;/code&gt; annotations:&lt;/p&gt; &lt;pre&gt;/// --- Remove @Autowire with @Inject // @Autowired      &amp;#60;--- Remove this @Inject private BalanceRepository repository; &lt;/pre&gt; &lt;p&gt;Note that we changed the &lt;code&gt;@RequestMapping&lt;/code&gt; annotation to &lt;code&gt;@Path&lt;/code&gt;, and we also removed &lt;code&gt;@ResponseBody&lt;/code&gt;. As our last step, we need to change the &lt;code&gt;@PathVariable&lt;/code&gt; to &lt;code&gt;@PathParam&lt;/code&gt;, as shown below. (While not shown, we would apply similar changes to all the other methods in this Java class. See the &lt;a href="https://github.com/chengkuangan/AccountBalance-Quarkus-Sample" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;example application&amp;#8217;s source code&lt;/a&gt; to review all of the changes):&lt;/p&gt; &lt;pre&gt;@Path("/balance/{accountid}") @GET public Balance get(@PathParam("accountid") String accountId) { Balanceresult = repository.findByAccountId(accountId); return result; } &lt;/pre&gt; &lt;p&gt;That completes the migration, although I left out some steps to keep this exercise brief. As an example, the &lt;code&gt;AccountBalance&lt;/code&gt; application is meant to be deployed onto &lt;a href="https://www.openshift.com/" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;Red Hat OpenShift&lt;/a&gt;, so I modified the &lt;code&gt;Heathz.java&lt;/code&gt; file for that. You can view those changes in the application source.&lt;/p&gt; &lt;h3&gt;Step 3: Test the Quarkus application&lt;/h3&gt; &lt;p&gt;Next, we&amp;#8217;ll test our new application. Figure 1 shows the Spring Boot execution before migration.&lt;/p&gt; &lt;div id="attachment_694497" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-694497" class=" wp-image-694497 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2020/03/Screenshot-2020-03-11-at-10.07.33-AM-1024x90.png" src="https://developers.redhat.com/blog/wp-content/uploads/2020/03/Screenshot-2020-03-11-at-10.07.33-AM-1024x90.png" alt="A screenshot showing the Spring Boot start time at command prompt." width="640" height="56" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/03/Screenshot-2020-03-11-at-10.07.33-AM-1024x90.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/03/Screenshot-2020-03-11-at-10.07.33-AM-300x26.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/03/Screenshot-2020-03-11-at-10.07.33-AM-768x67.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/03/Screenshot-2020-03-11-at-10.07.33-AM.png 1528w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-694497" class="wp-caption-text"&gt;Figure 1. The Spring Boot app starts within 3.166 seconds.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Let&amp;#8217;s see how the Quarkus application&amp;#8217;s startup compares to Spring Boot. From the command prompt, switch over to the &lt;code&gt;AccountBalance&lt;/code&gt; directory. Execute the following command to run the migrated application:&lt;/p&gt; &lt;pre&gt;mvn quarkus:dev &lt;/pre&gt; &lt;p&gt;Note that the first time you run the application, it can take longer than it will on subsequent runs. Maven needs additional time to download the Quarkus repositories to your local machine. Figure 2 shows the start time for the new Quarkus application.&lt;/p&gt; &lt;div id="attachment_694537" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-694537" class=" wp-image-694537 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2020/03/Screenshot-2020-03-11-at-10.14.18-AM-1024x91.png" src="https://developers.redhat.com/blog/wp-content/uploads/2020/03/Screenshot-2020-03-11-at-10.14.18-AM-1024x91.png" alt="A screenshot of the Quarkus application's start time on first execution." width="640" height="57" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/03/Screenshot-2020-03-11-at-10.14.18-AM-1024x91.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/03/Screenshot-2020-03-11-at-10.14.18-AM-300x27.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/03/Screenshot-2020-03-11-at-10.14.18-AM-768x68.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-694537" class="wp-caption-text"&gt;Figure 2. Quarkus starts within 1.540 seconds.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;That&amp;#8217;s an improvement. Now let&amp;#8217;s do a &lt;a href="https://quarkus.io/guides/building-native-image" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;Quarkus-native build&lt;/a&gt;. Remember to execute the native build from the project&amp;#8217;s &lt;code&gt;root&lt;/code&gt; directory:&lt;/p&gt; &lt;pre&gt;/mvnw package -Pnative &lt;/pre&gt; &lt;p&gt;The output in Figure 3 indicates a successful Quarkus-native build.&lt;/p&gt; &lt;div id="attachment_694547" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-694547" class=" wp-image-694547 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2020/03/Screenshot-2020-03-11-at-10.20.18-AM-1024x328.png" src="https://developers.redhat.com/blog/wp-content/uploads/2020/03/Screenshot-2020-03-11-at-10.20.18-AM-1024x328.png" alt="A screenshot indicating theQuarkus-native build completed sucessfully." width="640" height="205" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/03/Screenshot-2020-03-11-at-10.20.18-AM-1024x328.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/03/Screenshot-2020-03-11-at-10.20.18-AM-300x96.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/03/Screenshot-2020-03-11-at-10.20.18-AM-768x246.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/03/Screenshot-2020-03-11-at-10.20.18-AM.png 1272w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-694547" class="wp-caption-text"&gt;Figure 3. The Quarkus-native build completes successfully.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Enter the following to run the native binary:&lt;/p&gt; &lt;pre&gt;./target/account-service-1.0.0-runner &lt;/pre&gt; &lt;p&gt;Figure 4 shows the execution time for the Quarkus-native build.&lt;/p&gt; &lt;div id="attachment_694557" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-694557" class=" wp-image-694557 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2020/03/Screenshot-2020-03-11-at-10.22.49-AM-1024x97.png" src="https://developers.redhat.com/blog/wp-content/uploads/2020/03/Screenshot-2020-03-11-at-10.22.49-AM-1024x97.png" alt="A screenshot of the execution time for the Quarkus native build." width="640" height="61" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/03/Screenshot-2020-03-11-at-10.22.49-AM-1024x97.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/03/Screenshot-2020-03-11-at-10.22.49-AM-300x29.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/03/Screenshot-2020-03-11-at-10.22.49-AM-768x73.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-694557" class="wp-caption-text"&gt;Figure 4. The Quarkus-native build starts within 0.071 seconds.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Finally, I created a simple UI to call the &lt;code&gt;AccountBalance&lt;/code&gt; service and display an account balance. As shown in Figure 5, the migrated application works as expected.&lt;/p&gt; &lt;div id="attachment_694567" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-694567" class=" wp-image-694567 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2020/03/Screenshot-2020-03-11-at-10.18.06-AM-1024x404.png" src="https://developers.redhat.com/blog/wp-content/uploads/2020/03/Screenshot-2020-03-11-at-10.18.06-AM-1024x404.png" alt="An account balance is displayed in the AccountBalance app's UI." width="640" height="253" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/03/Screenshot-2020-03-11-at-10.18.06-AM-1024x404.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/03/Screenshot-2020-03-11-at-10.18.06-AM-300x118.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/03/Screenshot-2020-03-11-at-10.18.06-AM-768x303.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/03/Screenshot-2020-03-11-at-10.18.06-AM.png 1332w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-694567" class="wp-caption-text"&gt;Figure 5. The AccountBalance application works as it should.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;The migration from Spring Boot to Quarkus was a success.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;Migrating the example application from Spring Boot to Quarkus was a pretty straightforward exercise. For a more complicated application, the migration path would be more complex. The biggest challenge with migrating my microservices application from Spring Boot to Quarkus was determining which annotations and libraries to use. The documentation for Quarkus provides good examples but omits import statements. Many IDEs will handle those configuration details for you, but I chose to migrate manually.&lt;/p&gt; &lt;p&gt;I hope this article serves as a starting point for migrating your Java applications from Spring Boot to Quarkus. If you want to take what you&amp;#8217;ve learned to the next level, you could &lt;a href="https://quarkus.io/guides/building-native-image#creating-a-container" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;follow these steps to containerize your application&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Resources&lt;/h2&gt; &lt;p&gt;Check out the following resources to learn more:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Find the complete &lt;a href="https://github.com/chengkuangan/AccountBalance-Quarkus-Sample" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;source code for the example application&lt;/a&gt; on GitHub.&lt;/li&gt; &lt;li&gt;See the &lt;a href="https://quarkus.io/guides/config" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;Quarkus Configuration Guide&lt;/a&gt; to learn how to configure your application using the Quarkus &lt;code&gt;ConfigProperty&lt;/code&gt;, &lt;code&gt;application.properties&lt;/code&gt;, and so on.&lt;/li&gt; &lt;li&gt;Learn more about the &lt;a href="https://quarkus.io/guides/mongodb-panache" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;MongoDB Panache extension&lt;/a&gt;. Also, see the &lt;a href="https://github.com/quarkusio/quarkus/blob/master/extensions/panache/mongodb-panache/runtime/src/main/java/io/quarkus/mongodb/panache/PanacheMongoRepositoryBase.java" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;PanacheMongoRepositoryBase&lt;/a&gt; repository on GitHub—reading source code is what developers do right!&lt;/li&gt; &lt;li&gt;Get more information about &lt;a href="https://quarkus.io/guides/building-native-image" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;building a native Quarkus executable&lt;/a&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F10%2Fmigrating-a-spring-boot-microservices-application-to-quarkus%2F&amp;#38;linkname=Migrating%20a%20Spring%20Boot%20microservices%20application%20to%20Quarkus" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F10%2Fmigrating-a-spring-boot-microservices-application-to-quarkus%2F&amp;#38;linkname=Migrating%20a%20Spring%20Boot%20microservices%20application%20to%20Quarkus" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F10%2Fmigrating-a-spring-boot-microservices-application-to-quarkus%2F&amp;#38;linkname=Migrating%20a%20Spring%20Boot%20microservices%20application%20to%20Quarkus" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F10%2Fmigrating-a-spring-boot-microservices-application-to-quarkus%2F&amp;#38;linkname=Migrating%20a%20Spring%20Boot%20microservices%20application%20to%20Quarkus" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F10%2Fmigrating-a-spring-boot-microservices-application-to-quarkus%2F&amp;#38;linkname=Migrating%20a%20Spring%20Boot%20microservices%20application%20to%20Quarkus" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F10%2Fmigrating-a-spring-boot-microservices-application-to-quarkus%2F&amp;#38;linkname=Migrating%20a%20Spring%20Boot%20microservices%20application%20to%20Quarkus" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F10%2Fmigrating-a-spring-boot-microservices-application-to-quarkus%2F&amp;#38;linkname=Migrating%20a%20Spring%20Boot%20microservices%20application%20to%20Quarkus" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F10%2Fmigrating-a-spring-boot-microservices-application-to-quarkus%2F&amp;#038;title=Migrating%20a%20Spring%20Boot%20microservices%20application%20to%20Quarkus" data-a2a-url="https://developers.redhat.com/blog/2020/04/10/migrating-a-spring-boot-microservices-application-to-quarkus/" data-a2a-title="Migrating a Spring Boot microservices application to Quarkus"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/04/10/migrating-a-spring-boot-microservices-application-to-quarkus/"&gt;Migrating a Spring Boot microservices application to Quarkus&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/howNm7-UqSg" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;While Spring Boot has long been the de-facto framework for developing container-based applications in Java, the performance benefits of a Kubernetes-native framework are hard to ignore. In this article, I will show you how to quickly migrate a Spring Boot microservices application to Quarkus. Once the migration is complete, we&amp;#8217;ll test the application and compare [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/04/10/migrating-a-spring-boot-microservices-application-to-quarkus/"&gt;Migrating a Spring Boot microservices application to Quarkus&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><post-id xmlns="com-wordpress:feed-additions:1">694017</post-id><dc:creator>chgan</dc:creator><dc:date>2020-04-10T07:00:50Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/04/10/migrating-a-spring-boot-microservices-application-to-quarkus/</feedburner:origLink></entry></feed>
